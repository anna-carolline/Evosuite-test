/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 21:49:56 GMT 2023
 */

package org.apache.commons.net.discard;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import org.apache.commons.net.discard.DiscardUDPClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscardUDPClient_ESTest extends DiscardUDPClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      discardUDPClient0.open();
      discardUDPClient0.send(byteArray0, 0, inetAddress0, (int) (byte)30);
      assertFalse(inetAddress0.isMCLinkLocal());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      discardUDPClient0.open(0);
      byte[] byteArray0 = new byte[1];
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      discardUDPClient0.send(byteArray0, inetAddress0);
      assertFalse(inetAddress0.isMulticastAddress());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      discardUDPClient0.open(0);
      byte[] byteArray0 = new byte[1];
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      discardUDPClient0.send(byteArray0, (int) (byte)0, inetAddress0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      byte[] byteArray0 = new byte[1];
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      // Undeclared exception!
      try { 
        discardUDPClient0.send(byteArray0, (int) (byte)88, inetAddress0, (int) (byte)88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal length
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      discardUDPClient0.open();
      InetAddress inetAddress0 = discardUDPClient0.getLocalAddress();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        discardUDPClient0.send(byteArray0, 2020, inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal length
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        discardUDPClient0.send((byte[]) null, (int) (byte)0, inetAddress0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null packet buffer
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      byte[] byteArray0 = new byte[1];
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        discardUDPClient0.send(byteArray0, inetAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DiscardUDPClient discardUDPClient0 = new DiscardUDPClient();
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      // Undeclared exception!
      try { 
        discardUDPClient0.send(byteArray0, (int) (byte)0, inetAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }
}
