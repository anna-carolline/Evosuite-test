/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:35:54 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.net.ftp.FTPClientConfigFunctionalTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClientConfigFunctionalTest_ESTest extends FTPClientConfigFunctionalTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPClientConfigFunctionalTest fTPClientConfigFunctionalTest0 = new FTPClientConfigFunctionalTest();
      try { 
        fTPClientConfigFunctionalTest0.testTimeZoneFunctionality();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FTPClientConfigFunctionalTest fTPClientConfigFunctionalTest0 = new FTPClientConfigFunctionalTest("L");
          try { 
            fTPClientConfigFunctionalTest0.setUp();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:21\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:136)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:289)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:271)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:256)
             // org.apache.commons.net.ftp.FTPClientConfigFunctionalTest.setUp(FTPClientConfigFunctionalTest.java:82)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPClientConfigFunctionalTest fTPClientConfigFunctionalTest0 = new FTPClientConfigFunctionalTest();
      fTPClientConfigFunctionalTest0.tearDown();
  }
}
