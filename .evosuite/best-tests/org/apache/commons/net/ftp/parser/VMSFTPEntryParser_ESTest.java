/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:50:25 GMT 2023
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.regex.Matcher;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.parser.VMSFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VMSFTPEntryParser_ESTest extends VMSFTPEntryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.getDefaultConfiguration();
      Matcher matcher0 = vMSFTPEntryParser0._matcher_;
      vMSFTPEntryParser0._matcher_ = null;
      vMSFTPEntryParser0.getDefaultConfiguration();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn("AS/400", (String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      int int0 = 13;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).available();
      doReturn(int0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string0 = "Mn5;.&-CTvX<_\\@i";
      vMSFTPEntryParser0.parseFTPEntry(string0);
      vMSFTPEntryParser0.parseFileList(inputStream0);
      vMSFTPEntryParser0.getDefaultConfiguration();
      String string1 = "";
      vMSFTPEntryParser0.parseFTPEntry(string1);
      vMSFTPEntryParser0.isVersioning();
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      vMSFTPEntryParser0.parseFileList(inputStream1);
      vMSFTPEntryParser0.getDefaultConfiguration();
      InputStream inputStream2 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      vMSFTPEntryParser0.parseFileList(inputStream2);
      String string2 = "1k n_";
      vMSFTPEntryParser0.parseFTPEntry(string2);
      vMSFTPEntryParser0.getDefaultConfiguration();
      vMSFTPEntryParser0.isVersioning();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.isVersioning();
      VMSFTPEntryParser vMSFTPEntryParser1 = new VMSFTPEntryParser();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      try { 
        vMSFTPEntryParser1.parseFileList(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.group((-180));
      vMSFTPEntryParser0.parseFTPEntry("l?5t");
      String string0 = "VMS";
      vMSFTPEntryParser0.matches("VMS");
      vMSFTPEntryParser0.parseFTPEntry("3 9");
      vMSFTPEntryParser0.isVersioning();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn("l?5t", (String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      BufferedReader bufferedReader1 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null, (String) null, (String) null, (String) null).when(bufferedReader1).readLine();
      // Undeclared exception!
      vMSFTPEntryParser0.readNextEntry(bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      BufferedReader bufferedReader1 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.matches(",");
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.getGroupsAsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.RegexFTPFileEntryParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      try { 
        vMSFTPEntryParser0.parseFileList(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.setRegex("", 12);
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFTPEntry("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.group(120);
      vMSFTPEntryParser0.setRegex("", 114);
      vMSFTPEntryParser0.getDefaultConfiguration();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      vMSFTPEntryParser0.isVersioning();
      vMSFTPEntryParser0.isVersioning();
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFTPEntry("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      String string0 = "";
      Matcher matcher0 = vMSFTPEntryParser0._matcher_;
      vMSFTPEntryParser0._matcher_ = null;
      vMSFTPEntryParser0.setRegex("");
      vMSFTPEntryParser0._matcher_ = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      InputStream inputStream0 = null;
      Matcher matcher0 = vMSFTPEntryParser0._matcher_;
      vMSFTPEntryParser0._matcher_ = null;
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFileList((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser((FTPClientConfig) null);
      vMSFTPEntryParser0.setRegex("da", 0);
      vMSFTPEntryParser0.parseFTPEntry("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      Matcher matcher0 = vMSFTPEntryParser0._matcher_;
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.readNextEntry((BufferedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      doReturn(" yyyy", (String) null).when(bufferedReader0).readLine();
      vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      int int0 = 87;
      int int1 = 6;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).available();
      doReturn(int1, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      vMSFTPEntryParser0.parseFileList(inputStream0);
      vMSFTPEntryParser0.group(int0);
      vMSFTPEntryParser0.isVersioning();
      vMSFTPEntryParser0.isVersioning();
      BufferedReader bufferedReader1 = mock(BufferedReader.class, new ViolatedAssumptionAnswer());
      vMSFTPEntryParser0.readNextEntry(bufferedReader1);
  }
}
