/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:43:09 GMT 2023
 */

package org.apache.commons.net.telnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.Charset;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import junit.framework.TestCase;
import org.apache.commons.net.telnet.EchoOptionHandler;
import org.apache.commons.net.telnet.SuppressGAOptionHandler;
import org.apache.commons.net.telnet.Telnet;
import org.apache.commons.net.telnet.TelnetClient;
import org.apache.commons.net.telnet.TelnetClientTest;
import org.apache.commons.net.telnet.TelnetInputListener;
import org.apache.commons.net.telnet.TelnetNotificationHandler;
import org.apache.commons.net.telnet.TelnetOptionHandler;
import org.apache.commons.net.telnet.TelnetTestSimpleServer;
import org.apache.commons.net.telnet.TerminalTypeOptionHandler;
import org.apache.commons.net.telnet.WindowSizeOptionHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Telnet_ESTest extends Telnet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("Already registered option");
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      telnetClient0.setConnectTimeout((-511));
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals((-511), telnetClient0.getConnectTimeout());
      
      // Undeclared exception!
      try { 
        telnetClient0.requestDo(169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      TelnetClient telnetClient0 = new TelnetClient("Oz", 0);
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(telnetClient0);
      
      try { 
        telnetClient0.deleteOptionHandler(261);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Option Code: 261
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 13;
      TelnetClient telnetClient0 = new TelnetClient(13);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      int int1 = 1101;
      int[] intArray0 = new int[7];
      telnetClient0.setWill(250);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      telnetClient0.processWont(66);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 1101;
      intArray0[4] = 13;
      intArray0[5] = 1101;
      intArray0[2] = 13;
      telnetClient0.processSuboption(intArray0, 13);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {13, 13, 13, 1101, 13, 1101, 0}, intArray0);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      MockServerSocket mockServerSocket0 = new MockServerSocket(1101, (-1608));
      assertNotNull(mockServerSocket0);
      
      mockServerSocket0.setReceiveBufferSize(13);
      assertEquals("ServerSocket[addr=null,localport=1101]", mockServerSocket0.toString());
      assertFalse(mockServerSocket0.isClosed());
      assertTrue(mockServerSocket0.isBound());
      
      InetAddress inetAddress0 = mockServerSocket0.getInetAddress();
      assertEquals("ServerSocket[addr=null,localport=1101]", mockServerSocket0.toString());
      assertFalse(mockServerSocket0.isClosed());
      assertTrue(mockServerSocket0.isBound());
      assertNull(inetAddress0);
      
      boolean boolean0 = telnetClient0.stateIsWont(13);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        telnetClient0.processWont(1101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1101
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertNotNull(telnet0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\r\n");
      assertFalse(boolean0);
      
      TerminalTypeOptionHandler terminalTypeOptionHandler0 = new TerminalTypeOptionHandler("\r\n", false, false, false, false);
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      assertFalse(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertNotNull(terminalTypeOptionHandler0);
      
      telnet0.addOptionHandler(terminalTypeOptionHandler0);
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      assertFalse(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      
      telnet0.spyWrite(243);
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      
      // Undeclared exception!
      try { 
        telnet0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      int int0 = (-52);
      TelnetClient telnetClient0 = new TelnetClient(229);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.setWont((-52));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -52
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Telnet telnet0 = new Telnet("Nggzmz5MpM9>>");
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      boolean boolean0 = telnet0.stateIsDont(246);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        telnet0._sendCommand((byte) (-121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("iD\"5 ");
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      telnetClient0.processCommand((-3656));
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Telnet telnet0 = new Telnet("");
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0.processDo(184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0.stateIsDo(509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 509
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("", (-1084));
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      TelnetInputListener telnetInputListener0 = mock(TelnetInputListener.class, new ViolatedAssumptionAnswer());
      telnetClient0.registerInputListener(telnetInputListener0);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      // Undeclared exception!
      try { 
        telnetClient0.addOptionHandler((TelnetOptionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      int int0 = (-2537);
      // Undeclared exception!
      try { 
        telnet0.requestedDont((-2537));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2537
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertNotNull(telnet0);
      
      TelnetClient telnetClient0 = new TelnetClient((-1705));
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      OutputStream outputStream0 = telnetClient0.getOutputStream();
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNull(outputStream0);
      
      telnet0._registerSpyStream((OutputStream) null);
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      
      // Undeclared exception!
      try { 
        telnet0.setWantWont((-1705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1705
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        telnetClient0.processDo(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      telnetClient0.disconnect();
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      telnetClient0._sendSubnegotiation((int[]) null);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      telnetClient0.spyRead(85);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnetClient0.setDo(65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int int0 = (-2735);
      // Undeclared exception!
      try { 
        telnet0.deleteOptionHandler((-2735));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2735
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 550;
      TelnetClient telnetClient0 = new TelnetClient(550);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      WindowSizeOptionHandler windowSizeOptionHandler0 = new WindowSizeOptionHandler(550, 550, true, true, true, true);
      assertTrue(windowSizeOptionHandler0.getInitRemote());
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertTrue(windowSizeOptionHandler0.getInitLocal());
      assertTrue(windowSizeOptionHandler0.getAcceptRemote());
      assertTrue(windowSizeOptionHandler0.getAcceptLocal());
      assertNotNull(windowSizeOptionHandler0);
      
      telnetClient0.addOptionHandler(windowSizeOptionHandler0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertTrue(windowSizeOptionHandler0.getInitRemote());
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertTrue(windowSizeOptionHandler0.getInitLocal());
      assertTrue(windowSizeOptionHandler0.getAcceptRemote());
      assertTrue(windowSizeOptionHandler0.getAcceptLocal());
      
      telnetClient0.processAYTResponse();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      int int1 = 2871;
      // Undeclared exception!
      try { 
        telnetClient0.stateIsWill(2871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2871
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Telnet telnet0 = new Telnet((String) null);
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0.processDont(428);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 428
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Telnet telnet0 = new Telnet("Unregistered option");
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      int int0 = (-3021);
      // Undeclared exception!
      try { 
        telnet0.setWantWill((-3021));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3021
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      String string0 = ">>RkB\";#^)[X'qO_";
      int int0 = (-3);
      // Undeclared exception!
      try { 
        telnet0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        telnet0.processWill(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("G");
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      telnetClient0.unregisterInputListener();
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      telnetClient0.setSendBufferSize((-311));
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      int int0 = 1534;
      telnetClient0.setDefaultPort(1534);
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(1534, telnetClient0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnetClient0.processWill(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("OVERRIDE_READ_ONLY");
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      TelnetClientTest telnetClientTest0 = new TelnetClientTest();
      assertNotNull(telnetClientTest0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        telnetClient0.requestWill(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "dv/9DF:";
      Telnet telnet0 = new Telnet("dv/9DF:");
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertNotNull(telnet0);
      
      int int0 = (-1691);
      // Undeclared exception!
      try { 
        telnet0.requestedDo((-1691));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1691
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("Invalid Option Code", 2308);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(telnetClient0);
      
      ServerSocketFactory serverSocketFactory0 = telnetClient0.getServerSocketFactory();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(serverSocketFactory0);
      
      telnetClient0.setServerSocketFactory(serverSocketFactory0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        telnetClient0.requestWill(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertNotNull(telnet0);
      
      int int0 = (-2137);
      telnet0.setDefaultPort((-2137));
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals((-2137), telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      
      WindowSizeOptionHandler windowSizeOptionHandler0 = new WindowSizeOptionHandler((-2137), (-2137));
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertFalse(windowSizeOptionHandler0.getAcceptLocal());
      assertFalse(windowSizeOptionHandler0.getInitRemote());
      assertFalse(windowSizeOptionHandler0.getInitLocal());
      assertFalse(windowSizeOptionHandler0.getAcceptRemote());
      assertNotNull(windowSizeOptionHandler0);
      
      windowSizeOptionHandler0.setInitRemote(false);
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertFalse(windowSizeOptionHandler0.getAcceptLocal());
      assertFalse(windowSizeOptionHandler0.getInitRemote());
      assertFalse(windowSizeOptionHandler0.getInitLocal());
      assertFalse(windowSizeOptionHandler0.getAcceptRemote());
      
      windowSizeOptionHandler0.setInitLocal(true);
      assertTrue(windowSizeOptionHandler0.getInitLocal());
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertFalse(windowSizeOptionHandler0.getAcceptLocal());
      assertFalse(windowSizeOptionHandler0.getInitRemote());
      assertFalse(windowSizeOptionHandler0.getAcceptRemote());
      
      windowSizeOptionHandler0.setDo(true);
      assertTrue(windowSizeOptionHandler0.getInitLocal());
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertFalse(windowSizeOptionHandler0.getAcceptLocal());
      assertFalse(windowSizeOptionHandler0.getInitRemote());
      assertFalse(windowSizeOptionHandler0.getAcceptRemote());
      
      telnet0.addOptionHandler(windowSizeOptionHandler0);
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals((-2137), telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertTrue(windowSizeOptionHandler0.getInitLocal());
      assertEquals(31, windowSizeOptionHandler0.getOptionCode());
      assertFalse(windowSizeOptionHandler0.getAcceptLocal());
      assertFalse(windowSizeOptionHandler0.getInitRemote());
      assertFalse(windowSizeOptionHandler0.getAcceptRemote());
      
      int int1 = 256;
      // Undeclared exception!
      try { 
        telnet0.setWantDont(256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "M.By~K";
      int int0 = 0;
      TelnetClient telnetClient0 = new TelnetClient("M.By~K", 0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      int int1 = 277;
      // Undeclared exception!
      try { 
        telnetClient0.requestedWill(277);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 277
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertNotNull(telnet0);
      
      telnet0.setWantDont(0);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1155;
      TelnetClient telnetClient0 = new TelnetClient(1155);
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      TerminalTypeOptionHandler terminalTypeOptionHandler0 = new TerminalTypeOptionHandler("\r\n");
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      assertNotNull(terminalTypeOptionHandler0);
      
      terminalTypeOptionHandler0.setWill(false);
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      
      terminalTypeOptionHandler0.setInitLocal(true);
      assertTrue(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      
      terminalTypeOptionHandler0.setInitLocal(true);
      assertTrue(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      
      telnetClient0.addOptionHandler(terminalTypeOptionHandler0);
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(terminalTypeOptionHandler0.getInitLocal());
      assertFalse(terminalTypeOptionHandler0.getAcceptLocal());
      assertFalse(terminalTypeOptionHandler0.getInitRemote());
      assertFalse(terminalTypeOptionHandler0.getAcceptRemote());
      assertEquals(24, terminalTypeOptionHandler0.getOptionCode());
      
      // Undeclared exception!
      try { 
        telnetClient0.stateIsDont(1155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1155
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      Telnet telnet0 = new Telnet("");
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int int0 = 1493;
      // Undeclared exception!
      try { 
        telnet0.stateIsDont(1493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1493
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((String) null, 24);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      intArray0[3] = 24;
      intArray0[4] = 24;
      intArray0[5] = 24;
      telnetClient0.processSuboption(intArray0, 24);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {24, 24, 24, 24, 24, 24}, intArray0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      telnetClient0.setDo(115);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-468);
      intArray0[1] = 1609;
      intArray0[2] = 16;
      intArray0[3] = 3173;
      intArray0[4] = (-1);
      intArray0[5] = (-2781);
      telnet0.processSuboption(intArray0, (-1));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-468), 1609, 16, 3173, (-1), (-2781)}, intArray0);
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      
      telnet0.processAYTResponse();
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      String string0 = "";
      Duration duration0 = Duration.ofMillis(2809L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plusMinutes(2809L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      Duration duration2 = Duration.ofHours(2140L);
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotNull(duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      
      Duration duration3 = duration1.negated();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertNotNull(duration3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      
      Duration duration4 = duration3.plus(duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration0));
      assertNotNull(duration4);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration4);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration4, duration3);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration0);
      
      Duration duration5 = duration1.minusMinutes(2809L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration5.equals((Object)duration4));
      assertFalse(duration5.equals((Object)duration2));
      assertFalse(duration5.equals((Object)duration1));
      assertFalse(duration5.equals((Object)duration3));
      assertTrue(duration5.equals((Object)duration0));
      assertNotNull(duration5);
      assertNotSame(duration0, duration5);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration5);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration5, duration4);
      assertNotSame(duration5, duration2);
      assertNotSame(duration5, duration0);
      assertNotSame(duration5, duration1);
      assertNotSame(duration5, duration3);
      
      long long0 = duration4.toDays();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration5));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration5));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration4));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration5));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration5));
      assertFalse(duration4.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration0));
      assertEquals(0L, long0);
      assertNotSame(duration0, duration5);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration5);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration4);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration5);
      assertNotSame(duration3, duration1);
      assertNotSame(duration4, duration5);
      assertNotSame(duration4, duration3);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration0);
      
      Duration duration6 = duration3.plusDays(2809L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration5));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration5));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration4));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration5));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration6.equals((Object)duration0));
      assertFalse(duration6.equals((Object)duration5));
      assertFalse(duration6.equals((Object)duration3));
      assertFalse(duration6.equals((Object)duration1));
      assertFalse(duration6.equals((Object)duration4));
      assertFalse(duration6.equals((Object)duration2));
      assertNotNull(duration6);
      assertNotSame(duration0, duration5);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration6);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration6);
      assertNotSame(duration1, duration5);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration4);
      assertNotSame(duration3, duration6);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration5);
      assertNotSame(duration3, duration1);
      assertNotSame(duration6, duration0);
      assertNotSame(duration6, duration5);
      assertNotSame(duration6, duration3);
      assertNotSame(duration6, duration1);
      assertNotSame(duration6, duration4);
      assertNotSame(duration6, duration2);
      
      long long1 = duration3.toNanos();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration5));
      assertFalse(duration0.equals((Object)duration6));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration6));
      assertFalse(duration1.equals((Object)duration5));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration4));
      assertFalse(duration3.equals((Object)duration6));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration5));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(long1 == long0);
      assertEquals((-168542809000000L), long1);
      assertNotSame(duration0, duration5);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration6);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration6);
      assertNotSame(duration1, duration5);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration4);
      assertNotSame(duration3, duration6);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration5);
      assertNotSame(duration3, duration1);
      
      Duration duration7 = duration4.multipliedBy(0L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(duration0.equals((Object)duration5));
      assertFalse(duration0.equals((Object)duration6));
      assertFalse(duration0.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration4));
      assertFalse(duration1.equals((Object)duration6));
      assertFalse(duration1.equals((Object)duration5));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration4));
      assertFalse(duration3.equals((Object)duration6));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration5));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration5));
      assertFalse(duration4.equals((Object)duration3));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration6));
      assertFalse(duration7.equals((Object)duration6));
      assertFalse(duration7.equals((Object)duration5));
      assertFalse(duration7.equals((Object)duration3));
      assertFalse(duration7.equals((Object)duration0));
      assertFalse(duration7.equals((Object)duration1));
      assertFalse(duration7.equals((Object)duration2));
      assertNotNull(duration7);
      assertNotSame(duration0, duration5);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration7);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration6);
      assertNotSame(duration0, duration4);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration6);
      assertNotSame(duration1, duration5);
      assertNotSame(duration1, duration7);
      assertNotSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration4);
      assertNotSame(duration3, duration7);
      assertNotSame(duration3, duration6);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration5);
      assertNotSame(duration3, duration1);
      assertNotSame(duration4, duration5);
      assertNotSame(duration4, duration3);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration2);
      assertNotSame(duration4, duration0);
      assertNotSame(duration4, duration6);
      assertSame(duration4, duration7);
      assertNotSame(duration7, duration6);
      assertNotSame(duration7, duration5);
      assertNotSame(duration7, duration3);
      assertNotSame(duration7, duration0);
      assertSame(duration7, duration4);
      assertNotSame(duration7, duration1);
      assertNotSame(duration7, duration2);
      
      // Undeclared exception!
      try { 
        telnetClient0._sendAYT(duration7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("org.apache.commons.io.file.AccumulatorPathVisitor", 256);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertNotNull(telnetClient0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 256;
      intArray0[1] = 256;
      intArray0[2] = 256;
      intArray0[3] = 256;
      intArray0[4] = 256;
      intArray0[5] = 256;
      telnetClient0.processSuboption(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {256, 256, 256, 256, 256, 256}, intArray0);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("", 0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      telnetClient0._stopSpyStream();
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      
      // Undeclared exception!
      try { 
        telnetClient0.sendDont(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Telnet telnet0 = new Telnet("N");
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0.sendTerminalType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(767);
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(telnetClient0);
      
      int int0 = 0;
      telnetClient0.setDefaultPort(0);
      assertEquals(0, telnetClient0.getDefaultPort());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      
      // Undeclared exception!
      try { 
        telnetClient0.requestWont(304);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 304
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("Already registered option");
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.sendDont((-21));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      telnet0.processDont(0);
      assertFalse(telnet0.isConnected());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      telnet0.processWont(0);
      assertFalse(telnet0.isConnected());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnet0.setWill((-1461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1461
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      telnetClient0.processDont(0);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnetClient0.sendDont((-1004));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "The magic number must contain at least one byte";
      Telnet telnet0 = new Telnet("The magic number must contain at least one byte");
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      int int0 = 10;
      int int1 = 0;
      telnet0.setConnectTimeout(0);
      assertEquals(0, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnet0.processWont(3834);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3834
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      TelnetClient telnetClient0 = new TelnetClient("!f", 0);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      Proxy proxy0 = telnetClient0.getProxy();
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNull(proxy0);
      
      telnetClient0.setProxy((Proxy) null);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnetClient0.sendByte(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((-2596));
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.requestDo(1894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1894
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((-2));
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      telnetClient0.processAYTResponse();
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnetClient0.requestWill((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertNotNull(telnet0);
      
      int int0 = 2153;
      // Undeclared exception!
      try { 
        telnet0.stateIsWont(2153);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2153
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int int0 = 0;
      telnet0.spyRead((-928));
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnet0.sendDo(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      telnetClient0.setConnectTimeout((-1183));
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals((-1183), telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      
      int int0 = 2068;
      // Undeclared exception!
      try { 
        telnetClient0.requestWill(2068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2068
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Telnet telnet0 = new Telnet("name");
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertNotNull(telnet0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = (-18);
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      telnet0.processSuboption(intArray0, 5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {5, 5, 5, (-18), 5, 5, 5, 5}, intArray0);
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      
      telnet0.processCommand(5);
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      
      boolean boolean0 = telnet0.requestedDont(5);
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertTrue(boolean0);
      
      TelnetClientTest telnetClientTest0 = new TelnetClientTest();
      assertNotNull(telnetClientTest0);
      
      TelnetTestSimpleServer telnetTestSimpleServer0 = new TelnetTestSimpleServer(529);
      assertNotNull(telnetTestSimpleServer0);
      
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      telnetClientTest0.closeConnection(telnetTestSimpleServer0, telnetClient0, 0);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      telnet0.registerNotifHandler(telnetClientTest0);
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnet0.setDo((-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("Unregistered option", 86);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      TelnetInputListener telnetInputListener0 = mock(TelnetInputListener.class, new ViolatedAssumptionAnswer());
      telnetClient0.registerInputListener(telnetInputListener0);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      telnetClient0.setDont(86);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      int int0 = 29;
      // Undeclared exception!
      try { 
        telnetClient0.sendWont(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("", (-3));
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.setDont((-2591));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2591
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("Zf 49pG}2CSgOi@");
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertNotNull(telnetClient0);
      
      int int0 = (-4);
      MockFile mockFile0 = new MockFile("\r\n", "\r\n");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      telnetClient0._registerSpyStream(mockFileOutputStream0);
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\r\n", mockFile0.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\\r\n", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\\r\n\\\r\n", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      
      telnetClient0.spyRead((-4));
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      
      // Undeclared exception!
      try { 
        telnetClient0.processDo((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      telnet0.unregisterNotifHandler();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      
      telnet0.setWont(116);
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("pF@*1B5T2E");
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      int int0 = (-651);
      telnetClient0.spyWrite((-651));
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      
      // Undeclared exception!
      try { 
        telnetClient0.setWantDo((-651));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -651
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("y7nfAv(4u5");
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      int int0 = (-327);
      // Undeclared exception!
      try { 
        telnetClient0.requestedWont((-327));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      telnet0.spyWrite((-5));
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertNotNull(telnetClient0);
      
      boolean boolean0 = telnetClient0.stateIsDo(7);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertFalse(boolean0);
      
      telnetClient0.setWantDo(7);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      telnet0.processCommand(754);
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnet0.sendByte(754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("N)y'");
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      telnetClient0.setDo(86);
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(23, telnet0.getDefaultPort());
      assertFalse(telnet0.isConnected());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0.setDo((-1785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1785
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      int[] intArray0 = new int[1];
      int int0 = 875;
      int int1 = 0;
      telnetClient0.setDefaultTimeout(0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      assertNotNull(socketFactory0);
      
      SocketFactory socketFactory1 = SocketFactory.getDefault();
      assertNotNull(socketFactory1);
      assertSame(socketFactory1, socketFactory0);
      
      telnetClient0.setSocketFactory(socketFactory0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertSame(socketFactory0, socketFactory1);
      
      intArray0[0] = 875;
      // Undeclared exception!
      try { 
        telnetClient0.processSuboption(intArray0, 875);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 875
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertNotNull(telnet0);
      
      int int0 = 115;
      int int1 = (-736);
      // Undeclared exception!
      try { 
        telnet0.requestDont((-736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -736
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((String) null);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      telnetClient0.sendTerminalType();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 83;
      telnetClient0.processSuboption(intArray0, 83);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {83}, intArray0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      
      telnetClient0.unregisterNotifHandler();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      
      telnetClient0.setWantWill(83);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      telnetClient0.requestDont(0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      
      telnetClient0.processAYTResponse();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnetClient0.processWill((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertNotNull(telnet0);
      
      int int0 = 0;
      SocketFactory socketFactory0 = mock(SocketFactory.class, new ViolatedAssumptionAnswer());
      telnet0.setSocketFactory(socketFactory0);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      
      try { 
        telnet0.deleteOptionHandler(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unregistered option: 0
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      telnet0.setDefaultPort(2);
      assertFalse(telnet0.isConnected());
      assertEquals(2, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      telnet0.processWont(2);
      assertFalse(telnet0.isConnected());
      assertEquals(2, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      int int0 = 2147;
      // Undeclared exception!
      try { 
        telnet0.sendWont(2147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      TelnetClient telnetClient0 = new TelnetClient("Oz", 0);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      try { 
        telnetClient0.deleteOptionHandler(255);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unregistered option: 255
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("QO\"+/Qz");
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.deleteOptionHandler((-904));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -904
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      int int0 = 0;
      telnetClient0.setReceiveBufferSize(0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      boolean boolean0 = telnetClient0.requestedDo(0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        telnetClient0.sendWont(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      telnet0.processWont(18);
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      telnet0.setWantWont(0);
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int int0 = (-788);
      Proxy proxy0 = telnet0.getProxy();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNull(proxy0);
      
      telnet0.setProxy((Proxy) null);
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      
      // Undeclared exception!
      try { 
        telnet0._sendCommand((byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        telnet0.sendDo(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertNotNull(telnet0);
      
      Charset charset0 = telnet0.getCharset();
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      assertNotNull(charset0);
      
      telnet0.setCharset(charset0);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertTrue(charset0.canEncode());
      assertEquals("windows-1252", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("windows-1252", charset0.displayName());
      assertEquals("windows-1252", charset0.toString());
      
      telnet0.requestWont(2);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      
      telnet0.setWantWill(31);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      
      boolean boolean0 = telnet0.requestedDo(2);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(boolean0);
      
      telnet0.setWill(31);
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(0, telnet0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      // Undeclared exception!
      try { 
        telnet0._sendCommand((byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("hvm,,*u<", 0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      boolean boolean0 = telnetClient0.requestedWont(0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertTrue(boolean0);
      
      telnetClient0.setWantWill(0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("&56ENMM^yM@");
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      telnetClient0.requestWont(0);
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      telnetClient0.setWill(0);
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        telnetClient0.processWill((-593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -593
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      boolean boolean0 = telnetClient0.requestedDo(0);
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertFalse(telnet0.isConnected());
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertNotNull(telnet0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        telnet0._sendSubnegotiation(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      assertNotNull(telnet0);
      
      telnet0.sendTerminalType();
      assertEquals(23, telnet0.getDefaultPort());
      assertEquals(60000, telnet0.getConnectTimeout());
      assertEquals("windows-1252", telnet0.getCharsetName());
      assertEquals(0, telnet0.getDefaultTimeout());
      assertFalse(telnet0.isConnected());
      
      int int0 = 255;
      // Undeclared exception!
      try { 
        telnet0.sendDo(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("> ");
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertNotNull(telnetClient0);
      
      telnetClient0._stopSpyStream();
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      int int0 = (-18);
      telnetClient0.closeOutputStream();
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      
      // Undeclared exception!
      try { 
        telnetClient0.stateIsDont((-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("q+)Xa]+(U<={|^GaB");
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      assertNotNull(telnetClient0);
      
      // Undeclared exception!
      try { 
        telnetClient0.processWill(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 6449;
      TelnetClient telnetClient0 = new TelnetClient(6449);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertNotNull(telnetClient0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EchoOptionHandler echoOptionHandler0 = new EchoOptionHandler(true, true, true, true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      assertNotNull(echoOptionHandler0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      echoOptionHandler0.setWill(false);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      echoOptionHandler0.setAcceptRemote(true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      echoOptionHandler0.setDo(true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      echoOptionHandler0.setInitLocal(true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      echoOptionHandler0.setAcceptRemote(true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      echoOptionHandler0.setInitRemote(false);
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      assertFalse(echoOptionHandler0.getInitRemote());
      
      echoOptionHandler0.setInitRemote(true);
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      telnetClient0.addOptionHandler(echoOptionHandler0);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(echoOptionHandler0.getInitRemote());
      assertTrue(echoOptionHandler0.getInitLocal());
      assertTrue(echoOptionHandler0.getAcceptLocal());
      assertEquals(1, echoOptionHandler0.getOptionCode());
      assertTrue(echoOptionHandler0.getAcceptRemote());
      
      int int1 = 24;
      telnetClient0.setWill(24);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      telnetClient0.processDont(24);
      assertFalse(telnetClient0.isConnected());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      
      int int2 = 1917;
      // Undeclared exception!
      try { 
        telnetClient0.requestWont(1917);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1917
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      int int0 = 0;
      boolean boolean0 = telnetClient0.requestedWont(0);
      assertFalse(telnetClient0.isConnected());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        telnetClient0.requestWill(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((-10));
      assertEquals(60000, telnetClient0.getConnectTimeout());
      assertEquals(0, telnetClient0.getDefaultTimeout());
      assertFalse(telnetClient0.isConnected());
      assertTrue(telnetClient0.getReaderThread());
      assertEquals("windows-1252", telnetClient0.getCharsetName());
      assertEquals(23, telnetClient0.getDefaultPort());
      assertNotNull(telnetClient0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Duration duration0 = Duration.of((-71L), chronoUnit0);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plusDays(0L);
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
      
      Duration duration2 = duration1.minusDays(348L);
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertNotNull(duration2);
      assertNotSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      
      Duration duration3 = Duration.from(duration2);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertTrue(duration3.equals((Object)duration2));
      assertNotNull(duration3);
      assertNotSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      
      // Undeclared exception!
      try { 
        telnetClient0._sendAYT(duration3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = 13;
          TelnetClient telnetClient0 = new TelnetClient(13);
          int int1 = 1101;
          int[] intArray0 = new int[7];
          telnetClient0.setWill(250);
          telnetClient0.processWont(23);
          intArray0[0] = 13;
          intArray0[1] = 13;
          intArray0[2] = 13;
          intArray0[3] = 1101;
          intArray0[4] = 13;
          intArray0[5] = 1101;
          intArray0[6] = 13;
          telnetClient0.processSuboption(intArray0, 13);
          MockServerSocket mockServerSocket0 = new MockServerSocket(1101, (-1608));
          mockServerSocket0.setReceiveBufferSize(13);
          mockServerSocket0.getInetAddress();
          // Undeclared exception!
          try { 
            telnetClient0.connect("", 13, (InetAddress) null, 13);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"127.0.0.1:13\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:136)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:289)
             // sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      telnet0.unregisterNotifHandler();
      int int0 = 2153;
      // Undeclared exception!
      try { 
        telnet0.stateIsWont(2153);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2153
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Telnet telnet0 = new Telnet();
      int int0 = (-2473);
      int int1 = 5624;
      // Undeclared exception!
      try { 
        telnet0.sendWill((-2473));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Telnet telnet0 = new Telnet("");
      // Undeclared exception!
      try { 
        telnet0.getRemotePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("1pR6");
      int int0 = 663;
      // Undeclared exception!
      try { 
        telnetClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
}
