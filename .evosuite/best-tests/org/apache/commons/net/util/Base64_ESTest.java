/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:45:44 GMT 2023
 */

package org.apache.commons.net.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.net.util.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-44);
      Base64 base64_0 = new Base64(13, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("l{PsholV~_7@X9U3oQ");
      Base64.decodeInteger(byteArray0);
      base64_0.setInitialBuffer(byteArray1, 1134, 56);
      base64_0.decode(byteArray0, (-1849), (-2168));
      base64_0.decode(byteArray0, 13, 1908874353);
      base64_0.encode(byteArray1, 56, 13);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-44), 0);
      base64_0.getLineSeparator();
      base64_0.encodeToString(byteArray0);
      base64_0.decode("AeGosdQ=\u0001\u1A31\uFFFD");
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray1, 0, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.setInitialBuffer(byteArray1, (byte) (-16), 0);
      base64_0.encode(byteArray1, (int) (byte) (-16), (-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer(byteArray1, (byte)38, 0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)38, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer(byteArray1, (byte) (-1), 0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-1), (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer(byteArray1, (byte) (-1), 0);
      base64_0.encode(byteArray1, (int) (byte) (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)35;
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      byte byte1 = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte) (-4);
      byteArray2[3] = (byte) (-4);
      Base64 base64_0 = new Base64(91, byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1717986918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)2;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [}\uFFFD\uFFFD\u0000\t4\u0002]
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64StringUnChunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte) (-55));
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64("AOoA98nRAQA=");
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(5, byteArray1);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 14, 45);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)9);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)35;
      Base64.encodeBase64StringUnChunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)9);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byte byte1 = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)39;
      // Undeclared exception!
      try { 
        base64_0.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((byte[]) null);
      base64_0.setInitialBuffer((byte[]) null, (-1), (-1));
      base64_0.setInitialBuffer((byte[]) null, 0, 0);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-1), 1555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)1;
      Base64.encodeBase64StringUnChunked(byteArray0);
      base64_0.getLineLength();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)73;
      base64_0.readResults(byteArray2, (-1), 47);
      byteArray2[2] = (byte) (-30);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 1, (int) (byte)74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-122), (byte) (-127));
      base64_0.decode("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)56;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64StringUnChunked((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1139, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      base64_0.setInitialBuffer(byteArray0, 569, 0);
      base64_0.readResults(byteArray0, (-1630), 1139);
      base64_0.setInitialBuffer(byteArray0, 1139, 1139);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 1078);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode(byteArray3);
      base64_0.readResults(byteArray0, 434, 459);
      base64_0.getLineSeparator();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-55);
      Base64 base64_0 = new Base64((-3469), byteArray0, false);
      base64_0.encode(byteArray0, 0, (-1983));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)103;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray1, false);
      base64_0.encode(byteArray1, (int) (byte)103, (-2836));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)118;
      base64_0.setInitialBuffer(byteArray0, (byte)118, 46);
      byteArray0[6] = (byte)50;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode("qgCcM_92Mg");
      byte[] byteArray2 = base64_0.decode("qgCcM_92Mg");
      base64_0.decode(byteArray1, (int) (byte) (-100), 0);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encode((byte[]) null, 0, (int) (byte) (-86));
      // Undeclared exception!
      try { 
        base64_0.encodeToString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(".|8 wB0=en UI{Bxb^");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bigInt
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      base64_0.decode(byteArray0, (-230), (-230));
      base64_0.decode(byteArray0, 63, 63);
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      base64_0.decode("");
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.getLineLength();
      base64_0.setInitialBuffer(byteArray1, 0, (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 226, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 226
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 1899);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)54;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)20;
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.avail();
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)74;
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1267), (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      base64_0.readResults((byte[]) null, (byte)113, (byte)113);
      base64_0.encode(byteArray0);
      byteArray0[1] = (byte)107;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)113;
      byteArray1[1] = (byte)107;
      base64_0.encode(byteArray1);
      base64_0.decode("=wGWHdJC\"c&v<CC-");
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray2, 0, (-34));
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)22;
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0, true);
      base64_0.getLineSeparator();
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte) (-110);
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte) (-110);
      Base64.encodeBase64StringUnChunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      Base64 base64_0 = new Base64(11, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.setInitialBuffer(byteArray0, (byte)96, 69);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 69);
      base64_0.setInitialBuffer(byteArray1, 115, 0);
      base64_0.decode(byteArray0, 85, 0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.isBase64((byte)74);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)74;
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)60;
      Base64.encodeBase64StringUnChunked(byteArray0);
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("5.=D)Yj\"u,>c7");
      base64_0.avail();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-125));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64StringUnChunked(byteArray1);
      base64_0.setInitialBuffer(byteArray0, 818, 67);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.getLineSeparator();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(79);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)47;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.decode(byteArray2, (int) (byte) (-101), (-409));
      base64_0.encodeToString(byteArray2);
      byteArray1[0] = (byte) (-101);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      base64_0.getLineSeparator();
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode("");
      Base64.encodeBase64(byteArray3, false, false, 0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      int int0 = 48;
      Base64 base64_0 = new Base64(48, byteArray0);
      boolean boolean0 = false;
      base64_0.decode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 48, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.encodeBase64StringUnChunked(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("U");
      base64_0.readResults(byteArray3, 0, 5887);
      base64_0.decode("bigInt");
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults(byteArray4, 0, 0);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.setInitialBuffer(byteArray5, 0, 0);
      base64_0.encode(byteArray5, 0, 2611);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((-1));
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.setInitialBuffer(byteArray0, (-1), (-695));
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray3);
      base64_0.encode(byteArray1, 0, (int) (byte)0);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (8) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)51;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(222);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode("");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)5;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)17;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)23, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, (int) (byte)23);
      byte[] byteArray3 = Base64.decodeBase64("@8cV!nCha\"f8");
      base64_0.decode(byteArray3);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2115, 2115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2115
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 95;
      Base64 base64_0 = new Base64(95);
      byte[] byteArray0 = null;
      int int1 = (-283);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, (-283));
      base64_0.readResults((byte[]) null, 95, 95);
      base64_0.getLineLength();
      // Undeclared exception!
      try { 
        Base64.encodeBase64String((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64(byteArray1, false, false, 36);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)96;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)11);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)11;
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)11;
      byteArray2[3] = (byte)96;
      byteArray2[4] = (byte)96;
      Base64.encodeBase64StringUnChunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64((-3738));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.avail();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)73;
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)78;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      base64_0.hasData();
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)78;
      byteArray3[1] = (byte)106;
      byteArray3[2] = (byte)78;
      byteArray3[3] = (byte) (-99);
      byteArray3[4] = (byte)78;
      Base64.decodeBase64(byteArray3);
      base64_0.encode(byteArray2);
      base64_0.getLineLength();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)109);
      base64_0.decode(byteArray1, (-1), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)111;
      base64_0.encodeToString(byteArray0);
      base64_0.setInitialBuffer(byteArray0, 528, 2622);
      base64_0.encode(byteArray2, (int) (byte)18, (int) (byte)111);
      base64_0.getLineLength();
      base64_0.isUrlSafe();
      base64_0.setInitialBuffer(byteArray1, 1402, 1402);
      base64_0.getLineSeparator();
      base64_0.isUrlSafe();
      base64_0.decode(byteArray2, 0, 29);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.decode(byteArray0, 0, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)23;
      base64_0.encodeToString(byteArray1);
      byteArray0[0] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-42);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-19);
      byteArray3[3] = (byte) (-1);
      base64_0.readResults(byteArray3, (byte)0, 20);
      base64_0.hasData();
      base64_0.readResults(byteArray2, 1131, 136);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("8y[&1Y$!69xw2");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.decode("r4!P{ty}{$3(}B>");
      base64_0.getLineLength();
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64StringUnChunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0);
      base64_0.getLineSeparator();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-1902), byteArray1, true);
      base64_0.isUrlSafe();
      base64_0.getLineSeparator();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      base64_0.encode(byteArray1);
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byte byte3 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)122;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-18);
      base64_0.readResults(byteArray0, (byte) (-18), (-2201));
      Base64.encodeBase64(byteArray0, true);
      base64_0.setInitialBuffer(byteArray0, (byte)0, (byte) (-18));
      byte[] byteArray1 = null;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bigInt
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-40);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-40), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDq\u001B\uFFFD]
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-81);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1201, 825);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1201
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)109);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-1), (int) (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("|/kP*[=I'");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(294, byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      Base64 base64_0 = new Base64(83, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      Base64.encodeBase64String(byteArray0, false);
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(104, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u00000\u0000\u0000\u0000\uFFFD\uFFFD\u0001]
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1081, (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encodeToString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(2);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-28);
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (4) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("C[khm^");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [
         // Hf]
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      base64_0.setInitialBuffer(byteArray0, (byte)1, (byte)1);
      base64_0.readResults(byteArray0, 1, 1);
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64StringUnChunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(1078);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      Base64.encodeBase64StringUnChunked(byteArray0);
      base64_0.getLineSeparator();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)100;
      Base64.encodeBase64String(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1024, byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(9, (byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)7;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1407), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-44);
      Base64 base64_0 = new Base64(13, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("l{PsholV~_7@X9U3oQ");
      Base64.decodeInteger(byteArray0);
      base64_0.setInitialBuffer(byteArray1, 1134, 56);
      base64_0.decode(byteArray0, (-1849), (-2168));
      base64_0.decode(byteArray0, 13, 1908874353);
      base64_0.encode(byteArray1, 56, 13);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-44), 0);
      base64_0.getLineSeparator();
      base64_0.encodeToString(byteArray0);
      base64_0.decode("AOGoqNQ=\u0000\u1A28\uFFFD");
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray1, 0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      base64_0.readResults(byteArray0, 9, 493);
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)59;
      Base64.encodeBase64StringUnChunked(byteArray0);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)77;
      byte[] byteArray1 = base64_0.decode("[CT<&x3Y\"");
      byteArray0[7] = (byte) (-82);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.avail();
      byte[] byteArray3 = base64_0.getLineSeparator();
      base64_0.encode(byteArray3);
      base64_0.decode(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64("[CT<&x3Y\"");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray4);
      byte[] byteArray5 = base64_0.getLineSeparator();
      base64_0.encodeToString(byteArray3);
      byte[] byteArray6 = base64_0.decode("ybK");
      base64_0.readResults(byteArray0, (byte) (-82), (byte)77);
      Base64.decodeInteger(byteArray5);
      base64_0.readResults(byteArray6, (byte)92, (-1));
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer(byteArray0, (byte)90, 97);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 95);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)100;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray3 = base64_0.getLineSeparator();
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = new byte[2];
      Base64.encodeBase64(byteArray1, false);
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)93;
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      base64_0.decode(byteArray3);
      Base64.encodeInteger(bigInteger0);
      base64_0.getLineLength();
      Base64.isArrayByteBase64(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_0.getLineLength();
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)9);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer(byteArray1, (byte) (-1), 0);
      base64_0.encode(byteArray1, (int) (byte) (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-58);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4106, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [v\uFFFD\u0000\u0000\u0000v\u0000]
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-122);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-50);
      byteArray0[3] = (byte) (-50);
      Base64 base64_0 = new Base64((-2966), byteArray0);
      base64_0.decode(byteArray0, (-924), (-578));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeInteger(bigInteger1);
      base64_0.avail();
      Base64.decodeBase64("n;2yi}&*8/e=Rp>|GR");
      Base64.encodeBase64String(byteArray2, false);
      Base64.isBase64((byte) (-122));
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray3, false, false);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      base64_0.getLineSeparator();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (-924));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -924
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)39;
      Base64.encodeBase64StringUnChunked(byteArray0);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)31;
      byte byte0 = (byte)125;
      byteArray0[7] = (byte)125;
      byte byte1 = (byte)37;
      byteArray0[8] = (byte)37;
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bigInt
         //
         verifyException("java.util.Objects", e);
      }
  }
}
