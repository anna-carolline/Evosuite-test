/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:51:18 GMT 2023
 */

package org.apache.commons.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLContext;
import org.apache.commons.net.ProtocolCommandListener;
import org.apache.commons.net.bsd.RCommandClient;
import org.apache.commons.net.bsd.RExecClient;
import org.apache.commons.net.bsd.RLoginClient;
import org.apache.commons.net.chargen.CharGenTCPClient;
import org.apache.commons.net.daytime.DaytimeTCPClient;
import org.apache.commons.net.echo.EchoTCPClient;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPHTTPClient;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.imap.AuthenticatingIMAPClient;
import org.apache.commons.net.imap.IMAP;
import org.apache.commons.net.imap.IMAPSClient;
import org.apache.commons.net.nntp.NNTP;
import org.apache.commons.net.nntp.NNTPClient;
import org.apache.commons.net.pop3.ExtendedPOP3Client;
import org.apache.commons.net.pop3.POP3Client;
import org.apache.commons.net.pop3.POP3SClient;
import org.apache.commons.net.smtp.AuthenticatingSMTPClient;
import org.apache.commons.net.smtp.SMTPSClient;
import org.apache.commons.net.time.TimeTCPClient;
import org.apache.commons.net.whois.WhoisClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SocketClient_ESTest extends SocketClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
          AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient(false, sSLContext0);
          // Undeclared exception!
          try { 
            authenticatingSMTPClient0.connect((InetAddress) null, 4, (InetAddress) null, 2);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"192.168.1.42:4\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:136)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:242)
             // sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      ProtocolCommandListener protocolCommandListener0 = mock(ProtocolCommandListener.class, new ViolatedAssumptionAnswer());
      authenticatingSMTPClient0.removeProtocolCommandListener(protocolCommandListener0);
      assertEquals(0, authenticatingSMTPClient0.getDefaultTimeout());
      assertEquals(60000, authenticatingSMTPClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      ProtocolCommandListener protocolCommandListener0 = mock(ProtocolCommandListener.class, new ViolatedAssumptionAnswer());
      nNTP0.addProtocolCommandListener(protocolCommandListener0);
      assertEquals(0, nNTP0.getDefaultTimeout());
      assertEquals(60000, nNTP0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      charGenTCPClient0.setProxy((Proxy) null);
      try { 
        charGenTCPClient0.connect((InetAddress) null, 1023, (InetAddress) null, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@82b9b625
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      charGenTCPClient0.setProxy((Proxy) null);
      try { 
        charGenTCPClient0.connect("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@489e7b34
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WhoisClient whoisClient0 = new WhoisClient();
      // Undeclared exception!
      try { 
        whoisClient0.connect("", (-3515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-3515
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.connect("", (-6), (InetAddress) null, 1850);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-6
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WhoisClient whoisClient0 = new WhoisClient();
      whoisClient0.setDefaultPort((-729));
      assertEquals(60000, whoisClient0.getConnectTimeout());
      assertEquals(0, whoisClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedPOP3Client extendedPOP3Client0 = new ExtendedPOP3Client();
      extendedPOP3Client0.setSocketFactory((SocketFactory) null);
      assertEquals(0, extendedPOP3Client0.getDefaultTimeout());
      assertEquals(60000, extendedPOP3Client0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      rLoginClient0.setServerSocketFactory((ServerSocketFactory) null);
      assertEquals(0, rLoginClient0.getDefaultTimeout());
      assertEquals(60000, rLoginClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(sSLContext0);
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient("\r\n", "TLS");
      ServerSocketFactory serverSocketFactory0 = authenticatingIMAPClient0.getServerSocketFactory();
      assertNotNull(serverSocketFactory0);
      
      authenticatingSMTPClient0.setServerSocketFactory(serverSocketFactory0);
      assertEquals(60000, authenticatingSMTPClient0.getConnectTimeout());
      assertEquals(0, authenticatingSMTPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient("\r\n", "TLS");
      assertFalse(authenticatingSMTPClient0.isConnected());
      
      boolean boolean0 = authenticatingSMTPClient0.isAvailable();
      assertEquals(60000, authenticatingSMTPClient0.getConnectTimeout());
      assertFalse(boolean0);
      assertEquals(0, authenticatingSMTPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IMAP iMAP0 = new IMAP();
      // Undeclared exception!
      try { 
        iMAP0.verifyRemote((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IMAPSClient iMAPSClient0 = new IMAPSClient((SSLContext) null);
      iMAPSClient0.getCharsetName();
      assertEquals(60000, iMAPSClient0.getConnectTimeout());
      assertEquals(0, iMAPSClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient();
      authenticatingIMAPClient0.setDefaultTimeout(3009);
      assertEquals(3009, authenticatingIMAPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      SMTPSClient sMTPSClient0 = new SMTPSClient(sSLContext0);
      int int0 = sMTPSClient0.getConnectTimeout();
      assertEquals(60000, int0);
      assertEquals(0, sMTPSClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      POP3SClient pOP3SClient0 = new POP3SClient();
      // Undeclared exception!
      try { 
        pOP3SClient0.getTcpNoDelay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient("\r\n", "TLS");
      // Undeclared exception!
      try { 
        authenticatingSMTPClient0.getSoLinger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      IMAPSClient iMAPSClient0 = new IMAPSClient(true, sSLContext0);
      // Undeclared exception!
      try { 
        iMAPSClient0.getKeepAlive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      // Undeclared exception!
      try { 
        fTPSClient0.getRemotePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.setTcpNoDelay(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setSendBufferSize(84);
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RExecClient rExecClient0 = new RExecClient();
      ProtocolCommandListener protocolCommandListener0 = mock(ProtocolCommandListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rExecClient0.addProtocolCommandListener(protocolCommandListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SMTPSClient sMTPSClient0 = new SMTPSClient();
      // Undeclared exception!
      try { 
        sMTPSClient0.getSoTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient((String) null, false);
      // Undeclared exception!
      try { 
        authenticatingSMTPClient0.getRemoteAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EchoTCPClient echoTCPClient0 = new EchoTCPClient();
          // Undeclared exception!
          try { 
            echoTCPClient0.connect((InetAddress) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"192.168.1.42:7\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:136)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:225)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:210)
             // sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeTCPClient timeTCPClient0 = new TimeTCPClient();
      // Undeclared exception!
      try { 
        timeTCPClient0.getLocalPort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(sSLContext0);
      int int0 = authenticatingIMAPClient0.getDefaultTimeout();
      assertEquals(60000, authenticatingIMAPClient0.getConnectTimeout());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DaytimeTCPClient daytimeTCPClient0 = new DaytimeTCPClient();
      // Undeclared exception!
      try { 
        daytimeTCPClient0.getTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      // Undeclared exception!
      try { 
        pOP3Client0.setSoLinger(false, 2480);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      charGenTCPClient0.getProxy();
      assertEquals(60000, charGenTCPClient0.getConnectTimeout());
      assertEquals(0, charGenTCPClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RCommandClient rCommandClient0 = new RCommandClient();
      rCommandClient0.disconnect();
      assertEquals(0, rCommandClient0.getDefaultTimeout());
      assertEquals(60000, rCommandClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      // Undeclared exception!
      try { 
        nNTPClient0.setKeepAlive(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setReceiveBufferSize(256);
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      charGenTCPClient0.setProxy((Proxy) null);
      assertEquals(19, charGenTCPClient0.getDefaultPort());
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 19);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      charGenTCPClient0.connect("");
      assertEquals(0, charGenTCPClient0.getDefaultTimeout());
      assertEquals(60000, charGenTCPClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient("CJR(M-MD5", (-2801));
      // Undeclared exception!
      try { 
        fTPHTTPClient0.setSoTimeout((-1165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      int int0 = pOP3Client0.getDefaultPort();
      assertEquals(110, int0);
      assertEquals(0, pOP3Client0.getDefaultTimeout());
      assertEquals(60000, pOP3Client0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WhoisClient whoisClient0 = new WhoisClient();
      whoisClient0.setConnectTimeout(1040);
      assertEquals(1040, whoisClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      ProtocolCommandListener protocolCommandListener0 = mock(ProtocolCommandListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        charGenTCPClient0.removeProtocolCommandListener(protocolCommandListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      POP3SClient pOP3SClient0 = new POP3SClient("");
      Charset charset0 = mock(Charset.class, new ViolatedAssumptionAnswer());
      pOP3SClient0.setCharset(charset0);
      assertEquals(110, pOP3SClient0.getDefaultPort());
      assertEquals(0, pOP3SClient0.getDefaultTimeout());
      assertEquals(60000, pOP3SClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharGenTCPClient charGenTCPClient0 = new CharGenTCPClient();
      // Undeclared exception!
      try { 
        charGenTCPClient0.connect((InetAddress) null, (-1), (InetAddress) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
