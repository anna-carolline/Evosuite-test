/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:41:22 GMT 2023
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.apache.commons.net.tftp.TFTPPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPErrorPacket_ESTest extends TFTPErrorPacket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-277), (-624), (String) null);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(3, TFTPPacket.DATA);
      assertNotNull(tFTPErrorPacket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals((-624), tFTPErrorPacket0.getError());
      assertNull(tFTPErrorPacket0.getMessage());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals(5, tFTPErrorPacket0.getType());
      
      String string0 = tFTPErrorPacket0.toString();
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(3, TFTPPacket.DATA);
      assertNotNull(string0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals((-624), tFTPErrorPacket0.getError());
      assertNull(tFTPErrorPacket0.getMessage());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals("/127.0.0.1 -277 5 ERR -624 null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, (-1803), ".#<GgILs$~<vsxk");
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(tFTPErrorPacket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(".#<GgILs$~<vsxk", tFTPErrorPacket0.getMessage());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertEquals((-1803), tFTPErrorPacket0.getError());
      
      tFTPErrorPacket0.type = 0;
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals(0, tFTPErrorPacket0.getType());
      assertEquals(".#<GgILs$~<vsxk", tFTPErrorPacket0.getMessage());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertEquals((-1803), tFTPErrorPacket0.getError());
      
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(datagramPacket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals(0, tFTPErrorPacket0.getType());
      assertEquals(".#<GgILs$~<vsxk", tFTPErrorPacket0.getMessage());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertEquals((-1803), tFTPErrorPacket0.getError());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(0, datagramPacket0.getPort());
      assertEquals(20, datagramPacket0.getLength());
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 1950, 1950, "");
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(tFTPErrorPacket0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(1950, tFTPErrorPacket0.getError());
      assertEquals(1950, tFTPErrorPacket0.getPort());
      
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(datagramPacket0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(1950, tFTPErrorPacket0.getError());
      assertEquals(1950, tFTPErrorPacket0.getPort());
      assertEquals(1950, datagramPacket0.getPort());
      assertEquals(5, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      
      byte[] byteArray0 = new byte[9];
      DatagramPacket datagramPacket1 = tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(datagramPacket1);
      assertEquals(9, byteArray0.length);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(1950, tFTPErrorPacket0.getError());
      assertEquals(1950, tFTPErrorPacket0.getPort());
      assertEquals(1950, datagramPacket0.getPort());
      assertEquals(4, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(1950, datagramPacket1.getPort());
      assertEquals(0, datagramPacket1.getOffset());
      assertEquals(4, datagramPacket1.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)7, (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(datagramPacket0, datagramPacket1);
      assertSame(datagramPacket1, datagramPacket0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-277), (-624), (String) null);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertNotNull(tFTPErrorPacket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals((-624), tFTPErrorPacket0.getError());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertNull(tFTPErrorPacket0.getMessage());
      
      String string0 = tFTPErrorPacket0.getMessage();
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertNull(string0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals((-624), tFTPErrorPacket0.getError());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertNull(tFTPErrorPacket0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, (-1803), ".#<GgILs$~<vsxk");
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertNotNull(tFTPErrorPacket0);
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertEquals((-1803), tFTPErrorPacket0.getError());
      assertEquals(".#<GgILs$~<vsxk", tFTPErrorPacket0.getMessage());
      
      String string0 = tFTPErrorPacket0.getMessage();
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertNotNull(string0);
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertEquals((-1803), tFTPErrorPacket0.getError());
      assertEquals(".#<GgILs$~<vsxk", tFTPErrorPacket0.getMessage());
      assertEquals(".#<GgILs$~<vsxk", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)5);
      assertNotNull(datagramPacket0);
      assertEquals(9, byteArray0.length);
      assertEquals(5, datagramPacket0.getLength());
      assertEquals((-1), datagramPacket0.getPort());
      assertEquals(0, datagramPacket0.getOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertNotNull(tFTPErrorPacket0);
      assertEquals(9, byteArray0.length);
      assertEquals(5, datagramPacket0.getLength());
      assertEquals((-1), datagramPacket0.getPort());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals((-1), tFTPErrorPacket0.getPort());
      assertEquals(65280, tFTPErrorPacket0.getError());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(9, byteArray0.length);
      assertEquals(5, datagramPacket0.getLength());
      assertEquals((-1), datagramPacket0.getPort());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals((-1), tFTPErrorPacket0.getPort());
      assertEquals(65280, tFTPErrorPacket0.getError());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(65280, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-277), (-624), (String) null);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPErrorPacket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNull(tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals((-624), tFTPErrorPacket0.getError());
      
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNull(tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals((-277), tFTPErrorPacket0.getPort());
      assertEquals((-624), tFTPErrorPacket0.getError());
      assertEquals((-624), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "d");
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertNotNull(tFTPErrorPacket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals("d", tFTPErrorPacket0.getMessage());
      assertEquals(0, tFTPErrorPacket0.getError());
      assertEquals(0, tFTPErrorPacket0.getPort());
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram((DatagramPacket) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1, (String) null);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertNotNull(tFTPErrorPacket0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0, tFTPErrorPacket0.getPort());
      assertNull(tFTPErrorPacket0.getMessage());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals(1, tFTPErrorPacket0.getError());
      
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-784), (-784), "");
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPErrorPacket.UNDEFINED);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(4, TFTPErrorPacket.ILLEGAL_OPERATION);
      assertEquals(1, TFTPErrorPacket.FILE_NOT_FOUND);
      assertEquals(3, TFTPErrorPacket.OUT_OF_SPACE);
      assertEquals(2, TFTPErrorPacket.ACCESS_VIOLATION);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(5, TFTPErrorPacket.UNKNOWN_TID);
      assertEquals(7, TFTPErrorPacket.NO_SUCH_USER);
      assertEquals(6, TFTPErrorPacket.FILE_EXISTS);
      assertNotNull(tFTPErrorPacket0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(5, tFTPErrorPacket0.getType());
      assertEquals((-784), tFTPErrorPacket0.getError());
      assertEquals("", tFTPErrorPacket0.getMessage());
      assertEquals((-784), tFTPErrorPacket0.getPort());
      
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-784
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0);
      assertNotNull(datagramPacket0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(0, datagramPacket0.getLength());
      assertEquals((-1), datagramPacket0.getPort());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)5;
      byteArray0[4] = (byte) (-1);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)5);
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(0, tFTPErrorPacket0.getError());
      assertEquals("\uFFFF", tFTPErrorPacket0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, 0, 0, "");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[7];
      tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(4, datagramPacket0.getLength());
      assertEquals(0, tFTPErrorPacket0.getError());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, 0, 0, "");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, 0, 0, "");
      tFTPErrorPacket0.getMessage();
      assertEquals(0, tFTPErrorPacket0.getError());
  }
}
