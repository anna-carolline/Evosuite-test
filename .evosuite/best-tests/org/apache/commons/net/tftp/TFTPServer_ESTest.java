/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:03:56 GMT 2023
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.file.Path;
import java.util.Locale;
import org.apache.commons.net.DefaultDatagramSocketFactory;
import org.apache.commons.net.tftp.TFTP;
import org.apache.commons.net.tftp.TFTPAckPacket;
import org.apache.commons.net.tftp.TFTPDataPacket;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.apache.commons.net.tftp.TFTPPacket;
import org.apache.commons.net.tftp.TFTPReadRequestPacket;
import org.apache.commons.net.tftp.TFTPServer;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockNetworkInterface;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPServer_ESTest extends TFTPServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      PrintStream printStream0 = null;
      int int0 = (-990);
      TFTPServer.ServerMode[] tFTPServer_ServerModeArray0 = TFTPServer.ServerMode.values();
      assertNotNull(tFTPServer_ServerModeArray0);
      assertEquals(3, tFTPServer_ServerModeArray0.length);
      
      TFTPServer.ServerMode[] tFTPServer_ServerModeArray1 = TFTPServer.ServerMode.values();
      assertNotNull(tFTPServer_ServerModeArray1);
      assertNotSame(tFTPServer_ServerModeArray1, tFTPServer_ServerModeArray0);
      assertFalse(tFTPServer_ServerModeArray1.equals((Object)tFTPServer_ServerModeArray0));
      assertEquals(3, tFTPServer_ServerModeArray1.length);
      
      int int1 = 0;
      TFTPServer.ServerMode[] tFTPServer_ServerModeArray2 = TFTPServer.ServerMode.values();
      assertNotNull(tFTPServer_ServerModeArray2);
      assertNotSame(tFTPServer_ServerModeArray2, tFTPServer_ServerModeArray1);
      assertNotSame(tFTPServer_ServerModeArray2, tFTPServer_ServerModeArray0);
      assertFalse(tFTPServer_ServerModeArray2.equals((Object)tFTPServer_ServerModeArray1));
      assertFalse(tFTPServer_ServerModeArray2.equals((Object)tFTPServer_ServerModeArray0));
      assertEquals(3, tFTPServer_ServerModeArray2.length);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("commons-net-master", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      
      NetworkInterface networkInterface0 = MockNetworkInterface.getByName("Uu");
      assertNull(networkInterface0);
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile0, mockFile0, (-1929), (NetworkInterface) null, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1929
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      assertTrue(boolean0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("C:\\", file0.toString());
      assertFalse(file0.canExecute());
      
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.run();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertFalse(tFTP0.isOpen());
      
      byte[] byteArray0 = new byte[3];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w[&jk,f`M");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("w[&jk,f`M", file0.getName());
      assertFalse(file0.isHidden());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)9;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)5, (byte)9}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)69;
      boolean boolean1 = NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte)9, (byte)5, (byte)76, (byte)69}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      File file1 = MockFile.createTempFile("w[&jk,f`M", "w[&jk,f`M", file0);
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M\\w[&jk,f`M0w[&jk,f`M", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canExecute());
      assertEquals("w[&jk,f`M0w[&jk,f`M", file1.getName());
      assertTrue(file1.canWrite());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "w[&jk,f`M");
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("w[&jk,f`M", byteArrayOutputStream0.toString());
      assertEquals(9, byteArrayOutputStream0.size());
      
      TFTPServer tFTPServer0 = new TFTPServer(file0, file0, 5000, inetAddress0, tFTPServer_ServerMode0, printStream0, printStream0);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("w[&jk,f`MStarting TFTP Server on port 5000.  Read directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Write directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Server Mode is PUT_ONLY\r\nUnexpected Error in TFTP Server - Server shut down! + org.evosuite.runtime.mock.java.lang.MockThrowable: Simulated IO exception\r\n", byteArrayOutputStream0.toString());
      assertEquals(340, byteArrayOutputStream0.size());
      assertEquals(5000, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      int int0 = tFTPServer0.getMaxTimeoutRetries();
      assertEquals(3, int0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("w[&jk,f`MStarting TFTP Server on port 5000.  Read directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Write directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Server Mode is PUT_ONLY\r\nUnexpected Error in TFTP Server - Server shut down! + org.evosuite.runtime.mock.java.lang.MockThrowable: Simulated IO exception\r\n", byteArrayOutputStream0.toString());
      assertEquals(340, byteArrayOutputStream0.size());
      assertEquals(5000, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("w[&jk,f`MStarting TFTP Server on port 5000.  Read directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Write directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Server Mode is PUT_ONLY\r\nUnexpected Error in TFTP Server - Server shut down! + org.evosuite.runtime.mock.java.lang.MockThrowable: Simulated IO exception\r\n", byteArrayOutputStream0.toString());
      assertEquals(340, byteArrayOutputStream0.size());
      assertEquals(5000, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      int int1 = tFTPServer0.getPort();
      assertEquals(5000, int1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int1 == int0);
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("w[&jk,f`MStarting TFTP Server on port 5000.  Read directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Write directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Server Mode is PUT_ONLY\r\nUnexpected Error in TFTP Server - Server shut down! + org.evosuite.runtime.mock.java.lang.MockThrowable: Simulated IO exception\r\n", byteArrayOutputStream0.toString());
      assertEquals(340, byteArrayOutputStream0.size());
      assertEquals(5000, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      
      TFTPServer.ServerMode[] tFTPServer_ServerModeArray0 = TFTPServer.ServerMode.values();
      assertNotNull(tFTPServer_ServerModeArray0);
      assertEquals(3, tFTPServer_ServerModeArray0.length);
      
      int int2 = tFTPServer0.getPort();
      assertEquals(5000, int2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("w[&jk,f`M", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("w[&jk,f`M", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("w[&jk,f`M", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("w[&jk,f`MStarting TFTP Server on port 5000.  Read directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Write directory: C:\\Users\\anaba\\Downloads\\commons-net-master\\w[&jk,f`M Server Mode is PUT_ONLY\r\nUnexpected Error in TFTP Server - Server shut down! + org.evosuite.runtime.mock.java.lang.MockThrowable: Simulated IO exception\r\n", byteArrayOutputStream0.toString());
      assertEquals(340, byteArrayOutputStream0.size());
      assertEquals(5000, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HEXgh$IdNrko'", "s");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getParentFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("s", mockFile0.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'\\s", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("HEXgh$IdNrko'", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      
      File file1 = mockFile0.getCanonicalFile();
      assertNotNull(file1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("s", mockFile0.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'\\s", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertEquals("s", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'\\s", file1.toString());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'", file1.getParent());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)file1));
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file1, (-990), tFTPServer_ServerMode0, mockPrintStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server write directory C:\\Users\\anaba\\Downloads\\commons-net-master\\HEXgh$IdNrko'\\s does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertFalse(file0.isFile());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(file0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      
      int int0 = tFTPServer0.getSocketTimeout();
      assertEquals(5000, int0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.isRunning();
      mockFile0.getCanonicalPath();
      tFTPServer0.getSocketTimeout();
      tFTPServer0.getPort();
      tFTPServer0.getSocketTimeout();
      tFTPServer0.setMaxTimeoutRetries(5000);
      int int1 = 65535;
      tFTPServer0.setMaxTimeoutRetries(65535);
      TFTPServer.ServerMode.values();
      MockNetworkInterface.getByName("");
      TFTPServer.ServerMode tFTPServer_ServerMode1 = TFTPServer.ServerMode.GET_AND_PUT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(true, false);
      assertTrue(boolean0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, 1123, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
      assertNotNull(tFTPServer0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      tFTPServer0.setSocketTimeout(1123);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      assertFalse(tFTP0.isOpen());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      
      tFTP0.close();
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      assertFalse(tFTP0.isOpen());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      
      tFTPServer0.setMaxTimeoutRetries(1);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(1123, tFTPServer0.getPort());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      
      // Undeclared exception!
      try { 
        tFTPServer0.setMaxTimeoutRetries((-3870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Value
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.shutdown();
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertFalse(tFTP0.isOpen());
      
      tFTPServer0.finalize();
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.run();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertFalse(tFTP0.isOpen());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      
      byte[] byteArray0 = new byte[3];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      String string0 = "JDyibnF1Euy";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true, "JDyibnF1Euy");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // JDyibnF1Euy
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Invalid Value";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("Invalid Value");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getParentFile();
      assertNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals("Invalid Value", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Invalid Value", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      int int0 = (-112);
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer.ServerMode tFTPServer_ServerMode1 = TFTPServer.ServerMode.PUT_ONLY;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer((File) null, mockFile0, (-112), tFTPServer_ServerMode1, mockPrintStream1, mockPrintStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(file0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      int int0 = tFTPServer0.getSocketTimeout();
      assertEquals(5000, int0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.setMaxTimeoutRetries(5000);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(5000, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C:\\", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(5000, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      try { 
        tFTPServer0.isRunning();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertFalse(tFTP0.isOpen());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      
      TFTP tFTP1 = tFTPServer0.newTFTP();
      assertNotNull(tFTP1);
      assertNotSame(tFTP1, tFTP0);
      assertFalse(tFTP1.equals((Object)tFTP0));
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertFalse(tFTP1.isOpen());
      assertEquals("windows-1252", tFTP1.getCharsetName());
      assertEquals(5000, tFTP1.getDefaultTimeout());
      
      TFTP tFTP2 = tFTPServer0.newTFTP();
      assertNotNull(tFTP2);
      assertNotSame(tFTP2, tFTP1);
      assertNotSame(tFTP2, tFTP0);
      assertFalse(tFTP2.equals((Object)tFTP1));
      assertFalse(tFTP2.equals((Object)tFTP0));
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(5000, tFTP2.getDefaultTimeout());
      assertEquals("windows-1252", tFTP2.getCharsetName());
      assertFalse(tFTP2.isOpen());
      
      tFTPServer0.shutdown();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      byte[] byteArray0 = new byte[11];
      tFTPServer0.run();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      byteArray0[0] = (byte) (-1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("commons-net-master", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      
      MockFile mockFile1 = new MockFile(file0, "");
      assertNotNull(mockFile1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = mockFile1.setReadOnly();
      assertTrue(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("commons-net-master", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("commons-net-master", mockFile1.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isFile());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      mockFile0.deleteOnExit();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      TFTPServer tFTPServer0 = new TFTPServer(mockFile1, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("commons-net-master", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("commons-net-master", mockFile1.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isFile());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      boolean boolean1 = mockFile0.createNewFile();
      assertTrue(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      URI uRI0 = mockFile1.toURI();
      assertNotNull(uRI0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("commons-net-master", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("commons-net-master", mockFile1.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isFile());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:/C:/Users/anaba/Downloads/commons-net-master/", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/C:/Users/anaba/Downloads/commons-net-master/", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      
      tFTPServer0.isRunning();
      tFTPServer0.run();
      tFTPServer0.run();
      tFTPServer0.finalize();
      mockFile1.getAbsolutePath();
      tFTPServer0.getSocketTimeout();
      tFTPServer0.setLogError((PrintStream) null);
      try { 
        tFTPServer0.isRunning();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("C:\\Users\\anaba\\Downloads", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("commons-net-master", file0.getName());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      
      MockFile mockFile1 = new MockFile(file0, "");
      assertNotNull(mockFile1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.equals((Object)file0));
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      PrintStream printStream0 = null;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile1, mockFile1, (-1714), (InetAddress) null, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1714
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertFalse(tFTP0.isOpen());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      
      TFTP tFTP1 = tFTPServer0.newTFTP();
      assertNotNull(tFTP1);
      assertNotSame(tFTP1, tFTP0);
      assertFalse(tFTP1.equals((Object)tFTP0));
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTP1.getDefaultTimeout());
      assertFalse(tFTP1.isOpen());
      assertEquals("windows-1252", tFTP1.getCharsetName());
      
      byte[] byteArray0 = new byte[11];
      tFTPServer0.run();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      
      byteArray0[0] = (byte) (-1);
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, 0, 0, byteArray0);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(11, byteArray0.length);
      assertEquals(11, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      
      DatagramPacket datagramPacket0 = tFTPDataPacket0.newDatagram();
      assertNotNull(datagramPacket0);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(11, byteArray0.length);
      assertEquals(11, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(15, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(0, datagramPacket0.getPort());
      
      // Undeclared exception!
      try { 
        tFTPServer0.sendData(tFTP0, tFTPDataPacket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      assertFalse(tFTP0.isOpen());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      
      tFTPServer0.shutdown();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      tFTPServer0.setLogError((PrintStream) null);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      
      // Undeclared exception!
      try { 
        tFTPServer0.setSocketTimeout((-990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Value
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1612);
      assertNotNull(mockInetSocketAddress0);
      
      InetAddress inetAddress0 = mockInetSocketAddress0.getAddress();
      assertNotNull(inetAddress0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(1612, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:1612", mockInetSocketAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("\\", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, 1612, inetAddress0, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
      assertNotNull(tFTPServer0);
      assertEquals("\\", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(1612, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:1612", mockInetSocketAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(1612, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.setLog((PrintStream) null);
      assertEquals("\\", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(1612, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:1612", mockInetSocketAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(1612, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.setSocketTimeout(1612);
      assertEquals("\\", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(1612, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:1612", mockInetSocketAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(1612, tFTPServer0.getPort());
      assertEquals(1612, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TFTPServer.ServerMode[] tFTPServer_ServerModeArray0 = TFTPServer.ServerMode.values();
      assertNotNull(tFTPServer_ServerModeArray0);
      assertEquals(3, tFTPServer_ServerModeArray0.length);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      PrintStream printStream0 = null;
      TFTPServer tFTPServer0 = new TFTPServer(file0, mockFile0, 2822, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
      assertNotNull(tFTPServer0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
      
      tFTPServer0.shutdown();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      tFTPServer0.setMaxTimeoutRetries(0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      int int0 = tFTPServer0.getPort();
      assertEquals(2822, int0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      
      int int1 = 101;
      tFTPServer0.setMaxTimeoutRetries(101);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(101, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.close();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("\\", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C:\\", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(2822, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(101, tFTPServer0.getMaxTimeoutRetries());
      
      // Undeclared exception!
      try { 
        TFTPServer.ServerMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.net.tftp.TFTPServer.ServerMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The server write directory ", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      MockPrintStream mockPrintStream0 = new MockPrintStream("s\"CA^\"LF^gf32D");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      PrintStream printStream0 = mockPrintStream1.append('s');
      assertNotNull(printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream1, printStream0);
      assertSame(printStream0, mockPrintStream1);
      assertNotSame(printStream0, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printStream0;
      dataOutputStream0.writeDouble(0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) tFTPServer_ServerMode0;
      PrintStream printStream1 = mockPrintStream1.printf("", objectArray0);
      assertNotNull(printStream1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream1, printStream0);
      assertSame(mockPrintStream1, printStream1);
      assertSame(printStream1, mockPrintStream1);
      assertSame(printStream1, printStream0);
      assertNotSame(printStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream1.equals((Object)mockPrintStream0));
      assertEquals(5, objectArray0.length);
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile0, mockFile0, 0, tFTPServer_ServerMode0, printStream0, printStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\The server write directory does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getParentFile();
      assertNull(file0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegal IOCase name: ");
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = mockFile0.setExecutable(false);
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      
      mockPrintStream0.print((float) 2565);
      mockPrintStream0.println(true);
      boolean boolean1 = mockFile0.delete();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer((File) null, mockFile0, 2565, inetAddress0, tFTPServer_ServerMode0, mockPrintStream0, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      MockPrintStream mockPrintStream0 = new MockPrintStream("System");
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.flush();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "System");
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer((File) null, (File) null, (-814), inetAddress0, tFTPServer_ServerMode0, printStream0, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("Illegal IOCase name: ", "");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 0, "Illegal IOCase name: ", 0);
      assertNotNull(tFTPReadRequestPacket0);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPReadRequestPacket0.getMode());
      assertEquals("Illegal IOCase name: ", tFTPReadRequestPacket0.getFilename());
      assertEquals(1, tFTPReadRequestPacket0.getType());
      assertEquals(0, tFTPReadRequestPacket0.getPort());
      
      DatagramPacket datagramPacket0 = tFTPReadRequestPacket0.newDatagram();
      assertNotNull(datagramPacket0);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPReadRequestPacket0.getMode());
      assertEquals("Illegal IOCase name: ", tFTPReadRequestPacket0.getFilename());
      assertEquals(1, tFTPReadRequestPacket0.getType());
      assertEquals(0, tFTPReadRequestPacket0.getPort());
      assertEquals(34, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(0, datagramPacket0.getPort());
      
      InetAddress inetAddress1 = datagramPacket0.getAddress();
      assertNotNull(inetAddress1);
      assertSame(inetAddress0, inetAddress1);
      assertSame(inetAddress1, inetAddress0);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPReadRequestPacket0.getMode());
      assertEquals("Illegal IOCase name: ", tFTPReadRequestPacket0.getFilename());
      assertEquals(1, tFTPReadRequestPacket0.getType());
      assertEquals(0, tFTPReadRequestPacket0.getPort());
      assertEquals(34, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(0, datagramPacket0.getPort());
      assertFalse(inetAddress1.isMCGlobal());
      assertFalse(inetAddress1.isMulticastAddress());
      assertFalse(inetAddress1.isAnyLocalAddress());
      assertFalse(inetAddress1.isLinkLocalAddress());
      assertFalse(inetAddress1.isMCLinkLocal());
      assertFalse(inetAddress1.isMCOrgLocal());
      assertTrue(inetAddress1.isSiteLocalAddress());
      assertFalse(inetAddress1.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress1.toString());
      assertFalse(inetAddress1.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress1.getHostAddress());
      assertFalse(inetAddress1.isMCSiteLocal());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile0, mockFile1, 0, inetAddress1, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // A sintaxe do nome do arquivo, do nome do diret\u00F3rio ou do r\u00F3tulo do volume est\u00E1 incorreta
         //
         verifyException("java.io.WinNTFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "$VALUES");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("$VALUES", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("$VALUES", mockFile0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("$VALUES", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\$VALUES", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "$VALUES");
      assertNotNull(printStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(7L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("$VALUES", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("$VALUES", mockFile0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("$VALUES", file0.getName());
      assertEquals(7L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\$VALUES", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      assertNotNull(mockPrintStream1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile0, file0, 69, tFTPServer_ServerMode0, mockPrintStream1, printStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\$VALUES does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "org.apache.ftpserver.util.RegularExpr";
      File file0 = MockFile.createTempFile("org.apache.ftpserver.util.RegularExpr", "org.apache.ftpserver.util.RegularExpr");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("org.apache.ftpserver.util.RegularExpr0org.apache.ftpserver.util.RegularExpr", file0.getName());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp\\org.apache.ftpserver.util.RegularExpr0org.apache.ftpserver.util.RegularExpr", file0.toString());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      
      int int0 = 175;
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.ftpserver.util.RegularExpr");
      assertNotNull(mockPrintStream0);
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file0, (-3135), (NetworkInterface) null, tFTPServer_ServerMode0, mockPrintStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\AppData\\Local\\Temp\\org.apache.ftpserver.util.RegularExpr0org.apache.ftpserver.util.RegularExpr does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VQlY<[<(u-Jo");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(mockFile0, mockFile0, 4, tFTPServer_ServerMode0, mockPrintStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\VQlY<[<(u-Jo does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertFalse(tFTP0.isOpen());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      
      TFTP tFTP1 = tFTPServer0.newTFTP();
      assertNotNull(tFTP1);
      assertNotSame(tFTP1, tFTP0);
      assertFalse(tFTP1.equals((Object)tFTP0));
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("\\", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(5000, tFTP1.getDefaultTimeout());
      assertFalse(tFTP1.isOpen());
      assertEquals("windows-1252", tFTP1.getCharsetName());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, 0, 0, byteArray0);
      assertNotNull(tFTPDataPacket0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(1, byteArray0.length);
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(1, tFTPDataPacket0.getDataLength());
      
      // Undeclared exception!
      try { 
        tFTPServer0.sendData(tFTP0, tFTPDataPacket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(false, false);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, 1123, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
      assertNotNull(tFTPServer0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(1123, tFTPServer0.getPort());
      assertTrue(tFTPServer0.isRunning());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      tFTPServer0.setSocketTimeout(1123);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      
      TFTP tFTP0 = tFTPServer0.newTFTP();
      assertNotNull(tFTP0);
      assertEquals(0, TFTP.NETASCII_MODE);
      assertEquals(1, TFTP.OCTET_MODE);
      assertEquals(1, TFTP.IMAGE_MODE);
      assertEquals(0, TFTP.ASCII_MODE);
      assertEquals(1, TFTP.BINARY_MODE);
      assertEquals(5000, TFTP.DEFAULT_TIMEOUT);
      assertEquals(69, TFTP.DEFAULT_PORT);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals("windows-1252", tFTP0.getCharsetName());
      assertEquals(5000, tFTP0.getDefaultTimeout());
      assertFalse(tFTP0.isOpen());
      
      tFTPServer0.setMaxTimeoutRetries(1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(1123, tFTPServer0.getPort());
      assertEquals(1, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(1123, tFTPServer0.getSocketTimeout());
      
      tFTPServer0.newTFTP();
      tFTPServer0.run();
      assertEquals(1123, tFTPServer0.getSocketTimeout());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile0, mockFile0, tFTPServer_ServerMode0);
      assertNotNull(tFTPServer0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
      
      boolean boolean0 = tFTPServer0.isRunning();
      assertTrue(boolean0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(3, tFTPServer0.getMaxTimeoutRetries());
      assertEquals(69, tFTPServer0.getPort());
      assertEquals(5000, tFTPServer0.getSocketTimeout());
      assertTrue(tFTPServer0.isRunning());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      File file0 = MockFile.createTempFile("PvT*r -Pq", "");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("PvT*r -Pq0", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp\\PvT*r -Pq0", file0.toString());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file0, tFTPServer_ServerMode0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid argument
         //
         verifyException("java.io.WinNTFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "`z~^(";
      MockFile mockFile0 = new MockFile("`z~^(");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getParentFile();
      assertNull(file0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("`z~^(", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("`z~^(", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer((File) null, mockFile0, tFTPServer_ServerMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(file0).getCanonicalFile();
      doReturn((String) null).when(file0).toString();
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file1).toString();
      int int0 = 542;
      NetworkInterface networkInterface0 = MockNetworkInterface.getByName("");
      assertNull(networkInterface0);
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file1, 542, (NetworkInterface) null, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "fgP~Hr";
      MockFile mockFile0 = new MockFile("fgP~Hr", "fgP~Hr");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.equals((Object)mockFile0));
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr", mockFile0.getParent());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr\\fgP~Hr", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("fgP~Hr", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr\\fgP~Hr", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals("fgP~Hr", file0.getName());
      assertFalse(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      
      int int0 = (-506);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      
      NetworkInterface networkInterface0 = MockNetworkInterface.getByInetAddress(inetAddress0);
      assertNotNull(networkInterface0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(networkInterface0.isVirtual());
      assertEquals((-1), networkInterface0.getMTU());
      assertEquals(5, networkInterface0.getIndex());
      assertTrue(networkInterface0.supportsMulticast());
      assertEquals("name:Evo_en0", networkInterface0.toString());
      assertNull(networkInterface0.getDisplayName());
      assertFalse(networkInterface0.isLoopback());
      assertFalse(networkInterface0.isPointToPoint());
      assertFalse(networkInterface0.isUp());
      assertEquals("Evo_en0", networkInterface0.getName());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_ONLY;
      File file1 = MockFile.createTempFile("fgP~Hr", "fgP~Hr");
      assertNotNull(file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("fgP~Hr0fgP~Hr", file1.getName());
      assertTrue(file1.canWrite());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp\\fgP~Hr0fgP~Hr", file1.toString());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals("C:\\Users\\anaba\\AppData\\Local\\Temp", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertFalse(boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr", mockFile0.getParent());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr\\fgP~Hr", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("fgP~Hr", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file1);
      assertNotNull(mockPrintStream0);
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, mockFile0, (-506), networkInterface0, tFTPServer_ServerMode0, mockPrintStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\fgP~Hr\\fgP~Hr does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "7JEj((D-sk(EF4dDr";
      String string1 = "";
      MockFile mockFile0 = new MockFile("7JEj((D-sk(EF4dDr", "");
      assertNotNull(mockFile0);
      
      String string2 = mockFile0.getCanonicalPath();
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("7JEj((D-sk(EF4dDr", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.equals((Object)mockFile0));
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("7JEj((D-sk(EF4dDr", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("7JEj((D-sk(EF4dDr", file0.getName());
      assertFalse(file0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", file0.getParent());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      
      InetAddress inetAddress0 = MockInetAddress.getByName("7JEj((D-sk(EF4dDr");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("7JEj((D-sk(EF4dDr/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      
      NetworkInterface networkInterface0 = MockNetworkInterface.getByInetAddress(inetAddress0);
      assertNull(networkInterface0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("7JEj((D-sk(EF4dDr/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      
      String string3 = mockFile0.getCanonicalPath();
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", string3);
      assertNotNull(string3);
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("7JEj((D-sk(EF4dDr", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file0, (-990), (NetworkInterface) null, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\7JEj((D-sk(EF4dDr does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = new TFTPServer(mockFile1, mockFile0, tFTPServer_ServerMode0);
      tFTPServer0.getSocketTimeout();
      tFTPServer0.setMaxTimeoutRetries(5000);
      tFTPServer0.close();
      try { 
        tFTPServer0.isRunning();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "6-HPalmI9.z";
      // Undeclared exception!
      try { 
        TFTPServer.ServerMode.valueOf("6-HPalmI9.z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.net.tftp.TFTPServer.ServerMode.6-HPalmI9.z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      File file0 = MockFile.createTempFile("M#oC`feDg", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "Write not allowed by server.", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      int int0 = 0;
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string0 = "org.apache.commons.net.tftp.TFTPServer$TFTPTransfer";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "org.apache.commons.net.tftp.TFTPServer$TFTPTransfer");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.net.tftp.TFTPServer$TFTPTransfer
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "II~o_Wt@*`FhBGf0`Jv";
      MockFile mockFile0 = new MockFile("Invalid Value", "II~o_Wt@*`FhBGf0`Jv");
      File file0 = mockFile0.getParentFile();
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.PUT_ONLY;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, mockFile0, tFTPServer_ServerMode0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\Invalid Value does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot access files outside of TFTP server root.");
      File file0 = mockFile0.getCanonicalFile();
      TFTPServer.ServerMode tFTPServer_ServerMode0 = TFTPServer.ServerMode.GET_AND_PUT;
      TFTPServer tFTPServer0 = null;
      try {
        tFTPServer0 = new TFTPServer(file0, file0, 142, (InetAddress) null, tFTPServer_ServerMode0, (PrintStream) null, (PrintStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // The server read directory C:\\Users\\anaba\\Downloads\\commons-net-master\\Cannot access files outside of TFTP server root does not exist
         //
         verifyException("org.apache.commons.net.tftp.TFTPServer", e);
      }
  }
}
