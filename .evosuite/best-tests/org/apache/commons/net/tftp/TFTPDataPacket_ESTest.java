/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:44:08 GMT 2023
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPDataPacket;
import org.apache.commons.net.tftp.TFTPPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPDataPacket_ESTest extends TFTPDataPacket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 299, 4759, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      String string0 = tFTPDataPacket0.toString();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42 299 3 DATA 4759 0", string0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[7];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-55), (-55), byteArray0, (byte)0, (-466));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals((-466), tFTPDataPacket0.getDataLength());
      assertEquals((-55), tFTPDataPacket0.getBlockNumber());
      assertEquals((-55), tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertNotNull(tFTPDataPacket0);
      assertEquals(7, byteArray0.length);
      
      tFTPDataPacket0.setPort((byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(15, tFTPDataPacket0.getPort());
      assertEquals((-466), tFTPDataPacket0.getDataLength());
      assertEquals((-55), tFTPDataPacket0.getBlockNumber());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(7, byteArray0.length);
      
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)5, inetAddress0, 9);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(9, datagramPacket0.getPort());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(5, datagramPacket0.getLength());
      assertNotNull(datagramPacket0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal length
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 299, 4759, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      DatagramPacket datagramPacket0 = tFTPDataPacket0.newDatagram();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(299, datagramPacket0.getPort());
      assertEquals(4, datagramPacket0.getLength());
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(datagramPacket0);
      assertEquals(0, byteArray0.length);
      
      tFTPDataPacket0.setData((byte[]) null, (-1961), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals((-1961), tFTPDataPacket0.getDataOffset());
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram(datagramPacket0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 299, 4759, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      DatagramPacket datagramPacket0 = tFTPDataPacket0.newDatagram();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(299, datagramPacket0.getPort());
      assertEquals(4, datagramPacket0.getLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(datagramPacket0);
      assertEquals(0, byteArray0.length);
      
      tFTPDataPacket0.type = 1659;
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(1659, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      DatagramPacket datagramPacket1 = tFTPDataPacket0.newDatagram(datagramPacket0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)18, (byte) (-105), (byte)0, (byte)0}, byteArray1);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(1659, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(299, datagramPacket0.getPort());
      assertEquals(4, datagramPacket0.getLength());
      assertEquals(299, datagramPacket1.getPort());
      assertEquals(4, datagramPacket1.getLength());
      assertEquals(0, datagramPacket1.getOffset());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotSame(byteArray0, byteArray1);
      assertSame(datagramPacket0, datagramPacket1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(datagramPacket1, datagramPacket0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(datagramPacket1);
      assertEquals(0, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals((-1107), tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getPort());
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertNotNull(tFTPDataPacket0);
      
      tFTPDataPacket0.type = 0;
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals(0, tFTPDataPacket0.getType());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals((-1107), tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getPort());
      
      tFTPDataPacket0.setData((byte[]) null, (-1107), 0);
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getType());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals((-1107), tFTPDataPacket0.getDataOffset());
      assertEquals(226, tFTPDataPacket0.getPort());
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("=^");
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("=^/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[5];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, 0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("=^/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(5, tFTPDataPacket0.getDataLength());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertNotNull(tFTPDataPacket0);
      assertEquals(5, byteArray0.length);
      
      DatagramPacket datagramPacket0 = tFTPDataPacket0.newDatagram();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("=^/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(5, tFTPDataPacket0.getDataLength());
      assertEquals(0, datagramPacket0.getPort());
      assertEquals(9, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertNotNull(datagramPacket0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 299, 4759, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      int int0 = tFTPDataPacket0.getDataOffset();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(0, int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[5];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 304, 1, byteArray0, 115, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(1, tFTPDataPacket0.getBlockNumber());
      assertEquals(304, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(115, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertNotNull(tFTPDataPacket0);
      assertEquals(5, byteArray0.length);
      
      int int0 = tFTPDataPacket0.getDataOffset();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(1, tFTPDataPacket0.getBlockNumber());
      assertEquals(304, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(115, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(115, int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals((-1107), tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getPort());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertNotNull(tFTPDataPacket0);
      
      tFTPDataPacket0.setData((byte[]) null, (-1107), 0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getPort());
      assertEquals((-1107), tFTPDataPacket0.getDataOffset());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      
      int int0 = tFTPDataPacket0.getDataLength();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals(" RRQ /200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getPort());
      assertEquals((-1107), tFTPDataPacket0.getDataOffset());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(" DATA ", 101);
      assertNotNull(mockInetSocketAddress0);
      
      InetAddress inetAddress0 = mockInetSocketAddress0.getAddress();
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(101, mockInetSocketAddress0.getPort());
      assertEquals("/200.42.42.0:101", mockInetSocketAddress0.toString());
      assertEquals("/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 0, 0, byteArray0, 0, 101);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(101, mockInetSocketAddress0.getPort());
      assertEquals("/200.42.42.0:101", mockInetSocketAddress0.toString());
      assertEquals("/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals(101, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      int int0 = tFTPDataPacket0.getDataLength();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(101, mockInetSocketAddress0.getPort());
      assertEquals("/200.42.42.0:101", mockInetSocketAddress0.toString());
      assertEquals("/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals(101, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(101, int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1247, 0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(1247, tFTPDataPacket0.getPort());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      tFTPDataPacket0.setData(byteArray1, 0, (-809));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(1247, tFTPDataPacket0.getPort());
      assertEquals((-809), tFTPDataPacket0.getDataLength());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = tFTPDataPacket0.getData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(1247, tFTPDataPacket0.getPort());
      assertEquals((-809), tFTPDataPacket0.getDataLength());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 299, 4759, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = tFTPDataPacket0.getData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(4759, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(299, tFTPDataPacket0.getPort());
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 1247, 0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(1247, tFTPDataPacket0.getPort());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertNotNull(tFTPDataPacket0);
      assertEquals(0, byteArray0.length);
      
      int int0 = tFTPDataPacket0.getBlockNumber();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(1247, tFTPDataPacket0.getPort());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(0, int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("=2A6D");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("=2A6D/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[1];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 2, (-4270), byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("=2A6D/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals((-4270), tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(2, tFTPDataPacket0.getPort());
      assertEquals(1, tFTPDataPacket0.getDataLength());
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(1, byteArray0.length);
      
      int int0 = tFTPDataPacket0.getBlockNumber();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("=2A6D/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals((-4270), tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(2, tFTPDataPacket0.getPort());
      assertEquals(1, tFTPDataPacket0.getDataLength());
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals((-4270), int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, 0, (-2039), byteArray0, (byte)35, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, tFTPDataPacket0.getDataLength());
      assertEquals(35, tFTPDataPacket0.getDataOffset());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals(0, tFTPDataPacket0.getPort());
      assertEquals((-2039), tFTPDataPacket0.getBlockNumber());
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(5, TFTPPacket.ERROR);
      assertNotNull(tFTPDataPacket0);
      assertEquals(3, byteArray0.length);
      
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 2, (InetAddress) null, 3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, datagramPacket0.getPort());
      assertEquals(2, datagramPacket0.getLength());
      assertEquals(0, datagramPacket0.getOffset());
      assertNotNull(datagramPacket0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[6];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-3631), (-3631), byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals(3, tFTPDataPacket0.getType());
      assertEquals((-3631), tFTPDataPacket0.getPort());
      assertEquals((-3631), tFTPDataPacket0.getBlockNumber());
      assertEquals(6, tFTPDataPacket0.getDataLength());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(2, TFTPPacket.WRITE_REQUEST);
      assertEquals(5, TFTPPacket.ERROR);
      assertEquals(512, TFTPDataPacket.MAX_DATA_LENGTH);
      assertEquals(0, TFTPDataPacket.MIN_DATA_LENGTH);
      assertEquals(1, TFTPPacket.READ_REQUEST);
      assertEquals(512, TFTPPacket.SEGMENT_SIZE);
      assertEquals(3, TFTPPacket.DATA);
      assertEquals(4, TFTPPacket.ACKNOWLEDGEMENT);
      assertNotNull(tFTPDataPacket0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-3631
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, 0, 512, byteArray0, 6, 6);
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TFTPDataPacket tFTPDataPacket0 = null;
      try {
        tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, (-1206), (-1206), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TFTPDataPacket tFTPDataPacket0 = null;
      try {
        tFTPDataPacket0 = new TFTPDataPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0, 0, mockInetSocketAddress0);
      TFTPDataPacket tFTPDataPacket0 = null;
      try {
        tFTPDataPacket0 = new TFTPDataPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      InetAddress inetAddress0 = MockInetAddress.getByName("2Fq8r?pjwFf\u0006$");
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, (byte)13);
      TFTPDataPacket tFTPDataPacket0 = null;
      try {
        tFTPDataPacket0 = new TFTPDataPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      tFTPDataPacket0.setBlockNumber(83);
      assertEquals(83, tFTPDataPacket0.getBlockNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      int int0 = tFTPDataPacket0.getDataLength();
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals((-1107), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = mock(InetAddress.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-2292), (-2292), byteArray0, (-2292), 744);
      int int0 = tFTPDataPacket0.getDataOffset();
      assertEquals((-2292), int0);
      assertEquals((-2292), tFTPDataPacket0.getBlockNumber());
      assertEquals(512, tFTPDataPacket0.getDataLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = mock(InetAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inetAddress0).toString();
      byte[] byteArray0 = new byte[1];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, (-2292), (-2292), byteArray0, (-2292), 744);
      String string0 = tFTPDataPacket0.toString();
      assertEquals((-2292), tFTPDataPacket0.getDataOffset());
      assertEquals("null -2292 3 DATA -2292 512", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPDataPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      tFTPDataPacket0.getData();
      assertEquals((-1107), tFTPDataPacket0.getDataLength());
      assertEquals(226, tFTPDataPacket0.getBlockNumber());
      assertEquals(0, tFTPDataPacket0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(" RRQ ");
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 226, 226, (byte[]) null, 0, (-1107));
      int int0 = tFTPDataPacket0.getBlockNumber();
      assertEquals(0, tFTPDataPacket0.getDataOffset());
      assertEquals(226, int0);
      assertEquals((-1107), tFTPDataPacket0.getDataLength());
  }
}
