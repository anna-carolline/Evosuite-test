/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:27:48 GMT 2023
 */

package org.apache.commons.net.ntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.apache.commons.net.ntp.TimeStamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeStamp_ESTest extends TimeStamp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertNotNull(timeStamp0);
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(1374389534L, timeStamp0.getFraction());
      assertEquals(3601398081L, timeStamp0.getSeconds());
      assertEquals(1392409281320L, timeStamp0.getTime());
      
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      assertNotNull(timeStamp1);
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals(0L, timeStamp1.getTime());
      assertEquals(2208988800L, timeStamp1.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp1.ntpValue());
      assertEquals(0L, timeStamp1.getFraction());
      assertNotSame(timeStamp1, timeStamp0);
      
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertFalse(boolean0);
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(1374389534L, timeStamp0.getFraction());
      assertEquals(3601398081L, timeStamp0.getSeconds());
      assertEquals(1392409281320L, timeStamp0.getTime());
      assertEquals(0L, timeStamp1.getTime());
      assertEquals(2208988800L, timeStamp1.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp1.ntpValue());
      assertEquals(0L, timeStamp1.getFraction());
      assertNotSame(timeStamp0, timeStamp1);
      assertNotSame(timeStamp1, timeStamp0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(4294967296L);
      assertNotNull(timeStamp0);
      assertEquals(1L, timeStamp0.getSeconds());
      assertEquals(2085978497000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(4294967296L, timeStamp0.ntpValue());
      
      String string0 = timeStamp0.toUTCString();
      assertNotNull(string0);
      assertEquals("Thu, Feb 07 2036 06:28:17.000 UTC", string0);
      assertEquals(1L, timeStamp0.getSeconds());
      assertEquals(2085978497000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(4294967296L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(2085978496000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(751L);
      assertEquals((-8959209417253746377L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000144.320f8328");
      assertNotNull(timeStamp0);
      assertEquals(839877416L, timeStamp0.getFraction());
      assertEquals(324L, timeStamp0.getSeconds());
      assertEquals(1392409281320L, timeStamp0.ntpValue());
      assertEquals(2085978820196L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("83aa7e80.00000000");
      assertNotNull(timeStamp0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("83aa7e7f.828f5c28");
      assertNotNull(timeStamp0);
      assertEquals((-8959209422583800792L), timeStamp0.ntpValue());
      assertEquals(2208988799L, timeStamp0.getSeconds());
      assertEquals(2190433320L, timeStamp0.getFraction());
      assertEquals((-490L), timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(1L);
      assertNotNull(timeStamp0);
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(1L, timeStamp0.getFraction());
      assertEquals(1L, timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getSeconds());
      
      long long0 = timeStamp0.ntpValue();
      assertEquals(1L, long0);
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(1L, timeStamp0.getFraction());
      assertEquals(1L, timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertNotNull(timeStamp0);
      assertEquals(1374389534L, timeStamp0.getFraction());
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(3601398081L, timeStamp0.getSeconds());
      assertEquals(1392409281320L, timeStamp0.getTime());
      
      long long0 = timeStamp0.ntpValue();
      assertEquals((-2978857094563003106L), long0);
      assertEquals(1374389534L, timeStamp0.getFraction());
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(3601398081L, timeStamp0.getSeconds());
      assertEquals(1392409281320L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      assertNotNull(timeStamp0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.getTime());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      
      long long0 = timeStamp0.getTime();
      assertEquals(0L, long0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.getTime());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-490L));
      assertNotNull(timeStamp0);
      assertEquals((-490L), timeStamp0.getTime());
      assertEquals(2208988799L, timeStamp0.getSeconds());
      assertEquals(2190433320L, timeStamp0.getFraction());
      assertEquals((-8959209422583800792L), timeStamp0.ntpValue());
      
      long long0 = timeStamp0.getTime();
      assertEquals((-490L), long0);
      assertEquals((-490L), timeStamp0.getTime());
      assertEquals(2208988799L, timeStamp0.getSeconds());
      assertEquals(2190433320L, timeStamp0.getFraction());
      assertEquals((-8959209422583800792L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getSeconds());
      
      long long0 = timeStamp0.getSeconds();
      assertEquals(0L, long0);
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
      
      long long0 = timeStamp0.getFraction();
      assertEquals(0L, long0);
      assertEquals(0L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-2128L));
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertNotNull(timeStamp0);
      assertEquals((-8959209429618957222L), timeStamp0.ntpValue());
      assertEquals(2208988797L, timeStamp0.getSeconds());
      assertEquals((-2128L), timeStamp0.getTime());
      assertEquals(3745211482L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("ffffffff.ffffffff");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
      
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      assertNotNull(timeStamp1);
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals(1392409281320L, timeStamp1.getTime());
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(3601398081L, timeStamp1.getSeconds());
      assertEquals(1374389534L, timeStamp1.getFraction());
      assertNotSame(timeStamp1, timeStamp0);
      
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals((-1), int0);
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals(0L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(1392409281320L, timeStamp1.getTime());
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(3601398081L, timeStamp1.getSeconds());
      assertEquals(1374389534L, timeStamp1.getFraction());
      assertNotSame(timeStamp0, timeStamp1);
      assertNotSame(timeStamp1, timeStamp0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        TimeStamp.decodeNtpHexString("Thu, Feb 07 2036 06:28:16.000 UTC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Thu, Feb 07 2036 06:28:16\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeStamp timeStamp0 = null;
      try {
        timeStamp0 = new TimeStamp("Serialization is not supported");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Serialization is not supported\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = TimeStamp.getTime((-442L));
      assertEquals(2085978496000L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = TimeStamp.getTime(4294967295L);
      assertEquals(2085978497000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.getSeconds());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(2085978496000L, timeStamp0.getTime());
      
      long long0 = timeStamp0.ntpValue();
      assertEquals(0L, long0);
      assertEquals(0L, timeStamp0.getSeconds());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(2085978496000L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-8959209420474971849L)).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      assertNotNull(timeStamp0);
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals((-3646427234L), timeStamp0.ntpValue());
      
      String string0 = timeStamp0.toUTCString();
      assertNotNull(string0);
      assertEquals("Thu, Feb 07 2036 06:28:15.151 UTC", string0);
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals((-3646427234L), timeStamp0.ntpValue());
      
      String string1 = timeStamp0.toUTCString();
      assertNotNull(string1);
      assertEquals("Thu, Feb 07 2036 06:28:15.151 UTC", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals((-3646427234L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-8959209420474971849L)).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      assertNotNull(timeStamp0);
      assertEquals((-3646427234L), timeStamp0.ntpValue());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
      
      String string0 = timeStamp0.toDateString();
      assertNotNull(string0);
      assertEquals("Thu, Feb 07 2036 06:28:15.151", string0);
      assertEquals((-3646427234L), timeStamp0.ntpValue());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
      
      String string1 = timeStamp0.toDateString();
      assertNotNull(string1);
      assertEquals("Thu, Feb 07 2036 06:28:15.151", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals((-3646427234L), timeStamp0.ntpValue());
      assertEquals(4294967295L, timeStamp0.getSeconds());
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals(648540062L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1L);
      assertNotNull(timeStamp0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(4294967L, timeStamp0.getFraction());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(1L, timeStamp0.getTime());
      
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      assertNotNull(timeStamp1);
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals(1374389534L, timeStamp1.getFraction());
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(3601398081L, timeStamp1.getSeconds());
      assertEquals(1392409281320L, timeStamp1.getTime());
      assertNotSame(timeStamp1, timeStamp0);
      
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertFalse(boolean0);
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertFalse(timeStamp1.equals((Object)timeStamp0));
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(4294967L, timeStamp0.getFraction());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(1L, timeStamp0.getTime());
      assertEquals(1374389534L, timeStamp1.getFraction());
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(3601398081L, timeStamp1.getSeconds());
      assertEquals(1392409281320L, timeStamp1.getTime());
      assertNotSame(timeStamp0, timeStamp1);
      assertNotSame(timeStamp1, timeStamp0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(0L, timeStamp0.getSeconds());
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496000L);
      assertNotNull(timeStamp0);
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getSeconds());
      
      boolean boolean0 = timeStamp0.equals("ffffffff.ffffffff");
      assertFalse(boolean0);
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(2085978496000L, timeStamp0.getTime());
      assertEquals(0L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("1");
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("org.apache.commons.net.ntp.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = TimeStamp.toString(1L);
      assertNotNull(string0);
      assertEquals("00000000.00000001", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1L);
      assertNotNull(timeStamp0);
      assertEquals(1L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(4294967L, timeStamp0.getFraction());
      
      timeStamp0.hashCode();
      assertEquals(1L, timeStamp0.getTime());
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(4294967L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1L);
      assertNotNull(timeStamp0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(1L, timeStamp0.getTime());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(4294967L, timeStamp0.getFraction());
      
      long long0 = timeStamp0.getTime();
      assertEquals(1L, long0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertEquals(1L, timeStamp0.getTime());
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
      assertEquals(4294967L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-8959209420474971849L)).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      long long0 = timeStamp0.getSeconds();
      assertEquals(4294967295L, long0);
      assertEquals((-3646427234L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1L);
      long long0 = timeStamp0.getFraction();
      assertEquals(4294967L, long0);
      assertEquals((-8959209420474971849L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertTrue(boolean0);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      // Undeclared exception!
      try { 
        timeStamp0.compareTo((TimeStamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ntp.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals(0, int0);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(2208988800L, timeStamp1.getSeconds());
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-8959209420474971849L)).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      Date date1 = timeStamp0.getDate();
      assertEquals("Thu Feb 07 06:28:15 GMT 2036", date1.toString());
      assertEquals(2085978495151L, timeStamp0.getTime());
      assertEquals((-3646427234L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-8959209420474971849L)).when(date0).getTime();
      TimeStamp timeStamp0 = new TimeStamp(date0);
      String string0 = timeStamp0.toString();
      assertEquals("ffffffff.26a7ef9e", string0);
  }
}
