/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 21:55:33 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.Socket;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPSClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPSClient_ESTest extends FTPSClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertNotNull(fTPSClient0);
      
      fTPSClient0.setWantClientAuth(true);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertNotNull(fTPSClient0);
      
      fTPSClient0.setEnabledSessionCreation(true);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("", true);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.sslNegotiation();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not initialize SSL context
         //
         verifyException("org.apache.commons.net.util.SSLContextUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertNull(fTPSClient0.getPassiveHost());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.sendCommand("q@27cG#FT8I", "q@27cG#FT8I");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0.parsePBSZ((-784L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(true, sSLContext0);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.parsePBSZ(4294967295L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertNull(fTPSClient0.getPassiveHost());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.execAUTH();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(0, fTPSClient0.getBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_("BptWO=", "v<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_((-1763), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1763
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertNotNull(fTPSClient0);
      
      byte[] byteArray0 = fTPSClient0.parseADATReply((String) null);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0.sslNegotiation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertNull(fTPSClient0.getPassiveHost());
      assertNotNull(fTPSClient0);
      
      boolean boolean0 = fTPSClient0.getWantClientAuth();
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertNull(fTPSClient0.getPassiveHost());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false, (SSLContext) null);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNotNull(fTPSClient0);
      
      boolean boolean0 = fTPSClient0.getUseClientMode();
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNotNull(fTPSClient0);
      
      boolean boolean0 = fTPSClient0.getNeedClientAuth();
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNotNull(fTPSClient0);
      
      boolean boolean0 = fTPSClient0.getEnableSessionCreation();
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNotNull(fTPSClient0);
      
      String[] stringArray0 = fTPSClient0.getEnabledProtocols();
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertNotNull(fTPSClient0);
      
      String[] stringArray0 = fTPSClient0.getEnabledCipherSuites();
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0.parseADATReply("m0FFDy~'/Rep");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNull(fTPSClient0.getPassiveHost());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.execPBSZ(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("%OP\"%G]Mp3u<zXKwm");
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0.execPBSZ((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("jc2~", true);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertNotNull(fTPSClient0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        fTPSClient0.execMIC(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.execMIC((byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getBufferSize());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isConnected());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNotNull(fTPSClient0);
      
      byte[] byteArray0 = new byte[6];
      try { 
        fTPSClient0.execENC(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertNotNull(fTPSClient0);
      
      byte[] byteArray0 = new byte[3];
      try { 
        fTPSClient0.execCONF(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.isConnected());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertNotNull(fTPSClient0);
      
      byte[] byteArray0 = new byte[1];
      try { 
        fTPSClient0.execADAT(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(true, sSLContext0);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.execADAT((byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(";`&");
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNotNull(fTPSClient0);
      
      fTPSClient0.disconnect();
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertNull(fTPSClient0.getPassiveHost());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(990, fTPSClient0.getDefaultPort());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertNotNull(fTPSClient0);
      
      try { 
        fTPSClient0.execPROT((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.isConnected());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0.execPROT("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNull(fTPSClient0.getPassiveHost());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertNotNull(fTPSClient0);
      
      // Undeclared exception!
      try { 
        fTPSClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertNotNull(fTPSClient0);
      
      HostnameVerifier hostnameVerifier0 = fTPSClient0.getHostnameVerifier();
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertNull(hostnameVerifier0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertNotNull(fTPSClient0);
      
      String string0 = fTPSClient0.getAuthValue();
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertEquals("TLS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertNotNull(fTPSClient0);
      
      boolean boolean0 = fTPSClient0.isEndpointCheckingEnabled();
      assertEquals(6, FTP.CARRIAGE_CONTROL_TEXT_FORMAT);
      assertEquals(3, FTP.LOCAL_FILE_TYPE);
      assertEquals(4, FTP.NON_PRINT_TEXT_FORMAT);
      assertEquals(12, FTP.COMPRESSED_TRANSFER_MODE);
      assertEquals(5, FTP.TELNET_TEXT_FORMAT);
      assertEquals(3, FTPClient.PASSIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(0, FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(20, FTP.DEFAULT_DATA_PORT);
      assertEquals(2, FTP.BINARY_FILE_TYPE);
      assertEquals(3, FTP.REPLY_CODE_LEN);
      assertEquals(990, FTPSClient.DEFAULT_FTPS_PORT);
      assertEquals(2, FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE);
      assertEquals(1, FTPClient.ACTIVE_REMOTE_DATA_CONNECTION_MODE);
      assertEquals(11, FTP.BLOCK_TRANSFER_MODE);
      assertEquals(21, FTP.DEFAULT_PORT);
      assertEquals(9, FTP.PAGE_STRUCTURE);
      assertEquals(0, FTP.ASCII_FILE_TYPE);
      assertEquals(989, FTPSClient.DEFAULT_FTPS_DATA_PORT);
      assertEquals(8, FTP.RECORD_STRUCTURE);
      assertEquals(10, FTP.STREAM_TRANSFER_MODE);
      assertEquals(7, FTP.FILE_STRUCTURE);
      assertEquals(1, FTP.EBCDIC_FILE_TYPE);
      assertEquals((-1), fTPSClient0.getPassivePort());
      assertTrue(fTPSClient0.isRemoteVerificationEnabled());
      assertNull(fTPSClient0.getPassiveHost());
      assertEquals(0, fTPSClient0.getDataConnectionMode());
      assertEquals(0, fTPSClient0.getBufferSize());
      assertFalse(fTPSClient0.getAutodetectUTF8());
      assertEquals(0L, fTPSClient0.getRestartOffset());
      assertFalse(fTPSClient0.isIpAddressFromPasvResponse());
      assertEquals(0, fTPSClient0.getSendDataSocketBufferSize());
      assertFalse(fTPSClient0.isConnected());
      assertFalse(fTPSClient0.isStrictMultilineParsing());
      assertFalse(fTPSClient0.isUseEPSVwithIPv4());
      assertFalse(fTPSClient0.isEndpointCheckingEnabled());
      assertFalse(fTPSClient0.getListHiddenFiles());
      assertEquals(0, fTPSClient0.getReplyCode());
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("ISO-8859-1", fTPSClient0.getControlEncoding());
      assertEquals(0, fTPSClient0.getReceiveDataSocketBufferSize());
      assertTrue(fTPSClient0.isStrictReplyParsing());
      assertEquals(60000, fTPSClient0.getConnectTimeout());
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals("windows-1252", fTPSClient0.getCharsetName());
      assertEquals(0, fTPSClient0.getDefaultTimeout());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_(0, "P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false, (SSLContext) null);
      String[] stringArray0 = new String[6];
      fTPSClient0.setEnabledCipherSuites(stringArray0);
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.setUseClientMode(true);
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setAuthValue("PROT");
      assertEquals("PROT", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("0T)q.pmI");
      String[] stringArray0 = new String[2];
      fTPSClient0.setEnabledProtocols(stringArray0);
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      FTPSClient fTPSClient0 = new FTPSClient(sSLContext0);
      fTPSClient0._prepareDataSocket_((Socket) null);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(21, fTPSClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setNeedClientAuth(true);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(21, fTPSClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(";`&");
      fTPSClient0.setEndpointCheckingEnabled(true);
      assertTrue(fTPSClient0.isEndpointCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setHostnameVerifier((HostnameVerifier) null);
      assertEquals("TLS", fTPSClient0.getAuthValue());
      assertEquals(21, fTPSClient0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      try { 
        fTPSClient0.execCCC();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      TrustManager trustManager0 = fTPSClient0.getTrustManager();
      fTPSClient0.setTrustManager(trustManager0);
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      KeyManager keyManager0 = mock(KeyManager.class, new ViolatedAssumptionAnswer());
      fTPSClient0.setKeyManager(keyManager0);
      assertEquals(21, fTPSClient0.getDefaultPort());
      assertEquals("TLS", fTPSClient0.getAuthValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      try { 
        fTPSClient0.execAUTH("REIN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
}
