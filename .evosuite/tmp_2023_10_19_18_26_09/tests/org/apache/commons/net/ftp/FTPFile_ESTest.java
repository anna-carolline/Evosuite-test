/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:43:04 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Calendar;
import org.apache.commons.net.ftp.FTPFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      fTPFile0.setGroup("2J  Ywi");
      fTPFile0.setHardLinkCount(1);
      fTPFile0.toString();
      fTPFile0.isUnknown();
      fTPFile0.getTimestamp();
      fTPFile0.isFile();
      fTPFile0.toFormattedString();
      fTPFile0.toFormattedString("2J  Ywi");
      fTPFile0.setGroup("?---------    1          2J  Ywi       -1 null");
      fTPFile0.getName();
      fTPFile0.getHardLinkCount();
      fTPFile0.setType(2);
      fTPFile0.isSymbolicLink();
      fTPFile0.toFormattedString("?---------    1          2J  Ywi       -1 null");
      fTPFile0.getName();
      fTPFile0.getSize();
      fTPFile0.setUser((String) null);
      fTPFile0.getTimestamp();
      fTPFile0.toFormattedString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("Cp<Y<\"ILt#In)oIx");
      fTPFile0.toFormattedString();
      fTPFile0.toFormattedString();
      fTPFile0.isUnknown();
      fTPFile0.toString();
      fTPFile0.setType(1);
      fTPFile0.setLink("Cp<Y<\"ILt#In)oIx");
      fTPFile0.getTimestampInstant();
      fTPFile0.isSymbolicLink();
      fTPFile0.setSize(1L);
      fTPFile0.hasPermission(0, 1);
      fTPFile0.isUnknown();
      fTPFile0.isValid();
      fTPFile0.isDirectory();
      fTPFile0.toFormattedString("Cp<Y<\"ILt#In)oIx");
      fTPFile0.setRawListing("");
      fTPFile0.getType();
      fTPFile0.setHardLinkCount((-1));
      fTPFile0.isFile();
      fTPFile0.isDirectory();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("2J  Yi");
      fTPFile0.setGroup("2J  Yi");
      fTPFile0.setHardLinkCount(0);
      fTPFile0.toString();
      fTPFile0.isUnknown();
      fTPFile0.getTimestamp();
      fTPFile0.toFormattedString("2J  Yi");
      fTPFile0.isFile();
      fTPFile0.toFormattedString();
      fTPFile0.toFormattedString("2J  Yi");
      fTPFile0.setGroup("[Invalid: could not parse file entry]");
      fTPFile0.getName();
      fTPFile0.getHardLinkCount();
      fTPFile0.setType(2);
      fTPFile0.isSymbolicLink();
      fTPFile0.toFormattedString("[Invalid: could not parse file entry]");
      fTPFile0.getName();
      fTPFile0.getSize();
      fTPFile0.setUser("[Invalid: could not parse file entry]");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getTimestamp();
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile0.setName("");
      fTPFile0.setLink("");
      fTPFile0.isDirectory();
      fTPFile0.getGroup();
      fTPFile0.toFormattedString();
      fTPFile0.setPermission(0, 0, true);
      fTPFile0.toFormattedString((String) null);
      fTPFile0.setName("");
      fTPFile0.toString();
      fTPFile0.toFormattedString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getTimestamp();
      fTPFile0.getTimestampInstant();
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile0.toString();
      fTPFile0.setLink(">NB2;");
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile0.getRawListing();
      fTPFile0.setGroup((String) null);
      fTPFile0.setPermission(0, 0, true);
      fTPFile0.setRawListing((String) null);
      fTPFile0.getHardLinkCount();
      fTPFile0.isValid();
      fTPFile0.getTimestampInstant();
      fTPFile0.isDirectory();
      fTPFile0.setPermission(0, 0, true);
      fTPFile0.setLink("F<L@");
      fTPFile0.getSize();
      fTPFile0.getHardLinkCount();
      fTPFile0.isSymbolicLink();
      fTPFile0.getHardLinkCount();
      fTPFile0.getHardLinkCount();
      fTPFile0.hasPermission(0, 0);
      fTPFile0.isSymbolicLink();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setSize(0L);
      fTPFile0.setUser((String) null);
      fTPFile0.setHardLinkCount(0);
      fTPFile0.toFormattedString((String) null);
      fTPFile0.isUnknown();
      fTPFile0.getHardLinkCount();
      fTPFile0.getUser();
      fTPFile0.setType(108);
      fTPFile0.getTimestamp();
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile0.getUser();
      fTPFile0.setLink(":%1$tS");
      fTPFile0.toFormattedString((String) null);
      fTPFile0.toFormattedString("");
      fTPFile0.getSize();
      fTPFile0.toFormattedString();
      fTPFile0.setLink((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getTimestamp();
      fTPFile0.setType(0);
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile0.setGroup("Y`=1x6I/+J7r;5<r&m");
      fTPFile0.setHardLinkCount(0);
      fTPFile0.setName("~Re[P`hKE<TL");
      fTPFile0.setName("p6y/$~T2A;r[C%^Y]:P");
      fTPFile0.getGroup();
      fTPFile0.getType();
      fTPFile0.setType(0);
      fTPFile0.isSymbolicLink();
      fTPFile0.getGroup();
      fTPFile0.setHardLinkCount(0);
      fTPFile0.setRawListing("");
      fTPFile0.getType();
      fTPFile0.getTimestampInstant();
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(188, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 188
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setRawListing(":%1$tS");
      fTPFile0.setGroup(":%1$tS");
      fTPFile0.toFormattedString();
      fTPFile0.setType(0);
      fTPFile0.setGroup("Serialization is not supported");
      fTPFile0.toFormattedString("");
      fTPFile0.setSize(0L);
      fTPFile0.setGroup("j?(D\"VZFI");
      fTPFile0.setName("");
      fTPFile0.setLink("");
      fTPFile0.setName("y(Ugsi6;6z");
      fTPFile0.getName();
      fTPFile0.getHardLinkCount();
      fTPFile0.setGroup("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      fTPFile0.setGroup((String) null);
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setHardLinkCount((-1));
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string0 = fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string0);
      
      fTPFile0.setType((-4128));
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string1 = fTPFile0.toFormattedString();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", string1);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string1);
      
      fTPFile0.setRawListing("[Invalid: could not parse file entry]");
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setHardLinkCount((-1932));
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string2 = fTPFile0.getGroup();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string2);
      
      String string3 = fTPFile0.getGroup();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string3);
      
      boolean boolean0 = fTPFile0.isValid();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      boolean boolean1 = fTPFile0.isSymbolicLink();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      long long0 = fTPFile0.getSize();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-1L), long0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(instant0);
      
      String string4 = fTPFile0.toString();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertEquals((-1932), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string4);
      
      fTPFile0.setHardLinkCount((-1));
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string5 = fTPFile0.getRawListing();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string5);
      
      int int0 = fTPFile0.getType();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-4128), int0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(calendar0);
      
      String string6 = fTPFile0.toString();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-4128), fTPFile0.getType());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setRawListing("");
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setRawListing("");
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setHardLinkCount(1);
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      String string0 = fTPFile0.getRawListing();
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertEquals("", string0);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(string0);
      
      fTPFile0.setHardLinkCount(13);
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(13, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("Qte]HxB4#Y;");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setHardLinkCount(0);
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setGroup("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setLink("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.toFormattedString("Qte]HxB4#Y;");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string1);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string1);
      
      fTPFile0.setUser("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(calendar0);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string2 = fTPFile0.getName();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string2);
      
      String string3 = fTPFile0.toString();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("Qte]HxB4#Y;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string3);
      
      int int0 = fTPFile0.getType();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(3, int0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setName("Qte]HxB4#Y;");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("Qte]HxB4#Y;", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setRawListing("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string4 = fTPFile0.getLink();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("Qte]HxB4#Y;", fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertNotNull(fTPFile0);
      
      fTPFile0.setPermission(0, 0, false);
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(0, (-1094), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1094
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setUser("VqnE&'{BsSj");
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setLink("8z");
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string0 = fTPFile0.toFormattedString("8z");
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals("?---------    0 VqnE&'{BsSj                -1 null", string0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setHardLinkCount(1);
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType((-1));
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.toFormattedString();
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string1);
      
      String string2 = fTPFile0.toFormattedString((String) null);
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertNull(fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string2);
      
      fTPFile0.setRawListing("");
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals("8z", fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setLink("?---------    1 VqnE&'{BsSj                -1 null");
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isFile();
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string3 = fTPFile0.getUser();
      assertEquals("VqnE&'{BsSj", fTPFile0.getUser());
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals("VqnE&'{BsSj", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string3);
      
      fTPFile0.setUser("?---------    0 VqnE&'{BsSj                -1 null");
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals("?---------    0 VqnE&'{BsSj                -1 null", fTPFile0.getUser());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string4 = fTPFile0.toString();
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals("?---------    0 VqnE&'{BsSj                -1 null", fTPFile0.getUser());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string4);
      
      boolean boolean1 = fTPFile0.isUnknown();
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals("?---------    0 VqnE&'{BsSj                -1 null", fTPFile0.getUser());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setGroup("");
      assertEquals("?---------    1 VqnE&'{BsSj                -1 null", fTPFile0.getLink());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals("?---------    0 VqnE&'{BsSj                -1 null", fTPFile0.getUser());
      assertEquals((-1), fTPFile0.getType());
      assertEquals("", fTPFile0.toString());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString("x:;");
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("?---------    0                         -1 null", string0);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string0);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, int0);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string1 = fTPFile0.toString();
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string1);
      
      fTPFile0.setType(868);
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(868, fTPFile0.getType());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(0, 868);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 868
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(fTPFile0);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNull(instant0);
      
      fTPFile0.setHardLinkCount(0);
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, int0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      fTPFile0.setLink("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      String string0 = fTPFile0.toFormattedString("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("?---------    0                         -1 null", string0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(string0);
      
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      fTPFile0.setLink("cA0Ahz3M!B?");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("cA0Ahz3M!B?", fTPFile0.getLink());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      String string1 = fTPFile0.toFormattedString("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("cA0Ahz3M!B?", fTPFile0.getLink());
      assertEquals("?---------    0                         -1 null", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(string1);
      
      fTPFile0.setRawListing("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("cA0Ahz3M!B?", fTPFile0.getLink());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      fTPFile0.setLink("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      String string2 = fTPFile0.getName();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNull(string2);
      
      fTPFile0.setName("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNull(calendar0);
      
      boolean boolean1 = fTPFile0.isDirectory();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      int int1 = fTPFile0.getHardLinkCount();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      String string3 = fTPFile0.getUser();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(string3);
      
      fTPFile0.setSize(1L);
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      
      long long0 = fTPFile0.getSize();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1L, long0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setSize(501);
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(501L, fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setType(501);
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(501L, fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setHardLinkCount(501);
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(501L, fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(501L, fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNull(calendar0);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(501L, fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setSize(0L);
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      long long0 = fTPFile0.getSize();
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0L, long0);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(boolean0);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setName("");
      assertFalse(fTPFile0.isUnknown());
      assertEquals(501, fTPFile0.getType());
      assertEquals(501, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getName());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("WX6uz");
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("WX6uz", fTPFile0.toString());
      assertEquals("WX6uz", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString();
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("WX6uz", fTPFile0.toString());
      assertEquals("WX6uz", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string0);
      
      fTPFile0.setLink("WX6uz");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("WX6uz", fTPFile0.toString());
      assertEquals("WX6uz", fTPFile0.getRawListing());
      assertEquals("WX6uz", fTPFile0.getLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      // Undeclared exception!
      try { 
        fTPFile0.setPermission((-727), (-2551), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(":t\"2#");
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.getRawListing();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals(":t\"2#", string0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertNotNull(string0);
      
      String string1 = fTPFile0.getGroup();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertNotNull(string1);
      
      fTPFile0.setHardLinkCount((-926));
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      fTPFile0.setType(0);
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals((-926), int0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      fTPFile0.setHardLinkCount((-926));
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertNull(instant0);
      
      fTPFile0.setRawListing(":t\"2#");
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      long long0 = fTPFile0.getSize();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals((-1L), long0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      
      String string2 = fTPFile0.getRawListing();
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertEquals(":t\"2#", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertNotNull(string2);
      
      boolean boolean0 = fTPFile0.hasPermission(13, 0);
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":t\"2#", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":t\"2#", fTPFile0.getRawListing());
      assertEquals((-926), fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setRawListing((String) null);
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setType((-1315));
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-1315), fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      boolean boolean0 = fTPFile0.isValid();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-1315), fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      String string0 = fTPFile0.getLink();
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-1315), fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      long long0 = fTPFile0.getSize();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertEquals((-1L), long0);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("mF*TT4pfR*Cpw%Yn");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setLink("mF*TT4pfR*Cpw%Yn");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string0 = fTPFile0.getGroup();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals("", string0);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setRawListing("mF*TT4pfR*Cpw%Yn");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      boolean boolean0 = fTPFile0.isValid();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setGroup("mF*TT4pfR*Cpw%Yn");
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string1 = fTPFile0.getName();
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNull(string1);
      
      fTPFile0.setGroup("");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string2 = fTPFile0.getUser();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals("", string2);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string2);
      
      fTPFile0.setUser("");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      boolean boolean1 = fTPFile0.isFile();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string3 = fTPFile0.getLink();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals("mF*TT4pfR*Cpw%Yn", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string3);
      
      fTPFile0.setHardLinkCount(2375);
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(2375, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(2375, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNull(calendar0);
      
      fTPFile0.setHardLinkCount(2375);
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(2375, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string4 = fTPFile0.getRawListing();
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(2375, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.toString());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("mF*TT4pfR*Cpw%Yn", fTPFile0.getRawListing());
      assertEquals("mF*TT4pfR*Cpw%Yn", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString(" %1$tY-%1$tm-%1$td");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string0);
      
      String string1 = fTPFile0.toFormattedString((String) null);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string1);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string1);
      
      fTPFile0.setGroup("[Invalid: could not parse file entry]");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string2 = fTPFile0.getUser();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string2);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(instant0);
      
      String string3 = fTPFile0.getRawListing();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string3);
      
      String string4 = fTPFile0.getGroup();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string4);
      
      boolean boolean0 = fTPFile0.isFile();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setLink("");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setSize(0L);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string0 = fTPFile0.toFormattedString(" %1$tZ");
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals("?---------    0                          0 null", string0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      long long0 = fTPFile0.getSize();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0L, long0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(instant0);
      
      String string1 = fTPFile0.getLink();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string1);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, int0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals("?---------    0                         -1 null", string0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setType((-2198));
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals((-2198), fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType((-1482));
      assertEquals((-1482), fTPFile0.getType());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      int int0 = fTPFile0.getType();
      assertEquals((-1482), fTPFile0.getType());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals((-1482), int0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(2274, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2274
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString("x]ztGruuA*nu%DGP '");
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals("?---------    0                         -1 null", string0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setLink(":%1$tM");
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType((-2956));
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setUser("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType(0);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setSize((-343L));
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType((-2956));
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setName((String) null);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setGroup((String) null);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isDirectory();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertEquals(":%1$tM", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setLink("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setName("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.getRawListing();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string1);
      
      boolean boolean1 = fTPFile0.isUnknown();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean2 = fTPFile0.isFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertEquals((-343L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-2956), fTPFile0.getType());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(1792, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1792
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("]K!2b~JaQ6V");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setHardLinkCount((-1508));
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals((-1508), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType(0);
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertEquals(0, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals((-1508), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertEquals(0, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals((-1508), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(boolean0);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertEquals(0, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals((-1508), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(calendar0);
      
      boolean boolean1 = fTPFile0.isSymbolicLink();
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("]K!2b~JaQ6V", fTPFile0.toString());
      assertEquals(0, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.getGroup());
      assertEquals((-1508), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isFile());
      assertEquals("]K!2b~JaQ6V", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toString();
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string0);
      
      boolean boolean0 = fTPFile0.isFile();
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(calendar0);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      boolean boolean1 = fTPFile0.isSymbolicLink();
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setType(2847);
      assertEquals(2847, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertEquals(2847, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      int int0 = fTPFile0.getType();
      assertEquals(2847, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(2847, int0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setUser(":%1$tM");
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(":%1$tM", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setUser("");
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNull(instant0);
      
      FTPFile fTPFile1 = new FTPFile();
      assertTrue(fTPFile1.isValid());
      assertNull(fTPFile1.toString());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(3, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertNull(fTPFile1.getRawListing());
      assertFalse(fTPFile1.isDirectory());
      assertTrue(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(fTPFile1);
      
      String string0 = "";
      fTPFile0.setLink("(R29mG");
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile1.setRawListing("");
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("", fTPFile1.toString());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(3, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertEquals("", fTPFile1.getRawListing());
      assertFalse(fTPFile1.isDirectory());
      assertTrue(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      Calendar calendar0 = fTPFile1.getTimestamp();
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("", fTPFile1.toString());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(3, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertEquals("", fTPFile1.getRawListing());
      assertFalse(fTPFile1.isDirectory());
      assertTrue(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNull(calendar0);
      
      Instant instant1 = fTPFile0.getTimestampInstant();
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNull(instant1);
      
      fTPFile0.setSize(1);
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(1L, fTPFile0.getSize());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(1L, fTPFile0.getSize());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      fTPFile1.setRawListing("^i8j7w+:VXSK");
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("^i8j7w+:VXSK", fTPFile1.getRawListing());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(3, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertFalse(fTPFile1.isDirectory());
      assertTrue(fTPFile1.isUnknown());
      assertEquals("^i8j7w+:VXSK", fTPFile1.toString());
      assertFalse(fTPFile1.isSymbolicLink());
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string1 = fTPFile0.toFormattedString("");
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(1L, fTPFile0.getSize());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("[Invalid: could not parse file entry]", string1);
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(string1);
      
      fTPFile1.setType(1);
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("^i8j7w+:VXSK", fTPFile1.getRawListing());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(1, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertTrue(fTPFile1.isDirectory());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertEquals("^i8j7w+:VXSK", fTPFile1.toString());
      assertFalse(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string2 = fTPFile1.toFormattedString(" %8d");
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("^i8j7w+:VXSK", fTPFile1.getRawListing());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(1, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertTrue(fTPFile1.isDirectory());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertEquals("^i8j7w+:VXSK", fTPFile1.toString());
      assertFalse(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertEquals("d---------    0                         -1 null", string2);
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string2);
      
      String string3 = fTPFile0.getGroup();
      assertNotSame(fTPFile0, fTPFile1);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getRawListing());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(1L, fTPFile0.getSize());
      assertEquals("(R29mG", fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(fTPFile0.equals((Object)fTPFile1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(string3);
      
      String string4 = fTPFile1.toFormattedString();
      assertNotSame(fTPFile1, fTPFile0);
      assertTrue(fTPFile1.isValid());
      assertEquals("^i8j7w+:VXSK", fTPFile1.getRawListing());
      assertEquals(0, fTPFile1.getHardLinkCount());
      assertEquals(1, fTPFile1.getType());
      assertEquals((-1L), fTPFile1.getSize());
      assertEquals("", fTPFile1.getGroup());
      assertFalse(fTPFile1.isFile());
      assertTrue(fTPFile1.isDirectory());
      assertNull(fTPFile1.getLink());
      assertEquals("", fTPFile1.getUser());
      assertNull(fTPFile1.getName());
      assertEquals("^i8j7w+:VXSK", fTPFile1.toString());
      assertFalse(fTPFile1.isUnknown());
      assertFalse(fTPFile1.isSymbolicLink());
      assertEquals("d---------    0                         -1 null", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(fTPFile1.equals((Object)fTPFile0));
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        fTPFile1.setPermission((-1075), 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1075
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("MPeP<NU=X@Ij[K?");
      assertNull(fTPFile0.getLink());
      assertEquals("MPeP<NU=X@Ij[K?", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("MPeP<NU=X@Ij[K?", fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      boolean boolean0 = fTPFile0.isFile();
      assertNull(fTPFile0.getLink());
      assertEquals("MPeP<NU=X@Ij[K?", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("MPeP<NU=X@Ij[K?", fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setSize(188L);
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(boolean0);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      
      fTPFile0.setName("[Invalid: could not parse file entry]");
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      
      boolean boolean1 = fTPFile0.hasPermission((-511), 0);
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      
      String string0 = fTPFile0.getLink();
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertNull(string0);
      
      boolean boolean2 = fTPFile0.isUnknown();
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals(188L, fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isValid());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("J`ZC8]Kllwb2=,");
      assertNull(fTPFile0.getName());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setGroup("JIj t");
      assertNull(fTPFile0.getName());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.toString());
      assertEquals("JIj t", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      int int0 = fTPFile0.getType();
      assertNull(fTPFile0.getName());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.toString());
      assertEquals("JIj t", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(3, int0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertNull(fTPFile0.getName());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("J`ZC8]Kllwb2=,", fTPFile0.toString());
      assertEquals("JIj t", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertTrue(boolean0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(":%1$tS");
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(":%1$tS", fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(":%1$tS", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setUser(":%1$tS");
      assertEquals(":%1$tS", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(":%1$tS", fTPFile0.toString());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(":%1$tS", fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(3484, 3484, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertNotNull(fTPFile0);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertNull(instant0);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertNull(fTPFile0.getName());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setGroup("LV|oTuDrbM ");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string0 = fTPFile0.toFormattedString("uc#f");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertEquals("?---------    0          LV|oTuDrbM        -1 null", string0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setUser("uc#f");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string1 = fTPFile0.toFormattedString();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.toString());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    0 uc#f     LV|oTuDrbM        -1 null", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string1);
      
      fTPFile0.setType(1);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.toString());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals(1, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setRawListing("Fbi)jwG$V6:M");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setHardLinkCount(1);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setHardLinkCount(1);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setSize(0L);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setName("Fbi)jwG$V6:M");
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(1, int0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setRawListing("uc#f");
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string2 = fTPFile0.getName();
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals("LV|oTuDrbM ", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals("Fbi)jwG$V6:M", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string2);
      
      fTPFile0.setGroup("");
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("uc#f", fTPFile0.getUser());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setUser("");
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string3 = fTPFile0.toFormattedString((String) null);
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals("d---------    1                          0 Fbi)jwG$V6:M", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string3);
      
      String string4 = fTPFile0.toFormattedString("?---------    0 uc#f     LV|oTuDrbM        -1 null");
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals("d---------    1                          0 Fbi)jwG$V6:M", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string4);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      String string5 = fTPFile0.toString();
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals("uc#f", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertNotNull(string5);
      
      fTPFile0.setHardLinkCount(1);
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("Fbi)jwG$V6:M", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      
      fTPFile0.setName("");
      assertEquals("uc#f", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("uc#f", fTPFile0.toString());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      fTPFile0.setGroup((String) null);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setHardLinkCount(13);
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertEquals(13, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      boolean boolean0 = fTPFile0.isValid();
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getUser());
      assertEquals(13, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean0);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("'6f(2PXe{@]B0Wo*8");
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setType(1955);
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string0 = fTPFile0.toFormattedString();
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      fTPFile0.setName("");
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.getUser();
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string1);
      
      String string2 = fTPFile0.getName();
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string2);
      
      fTPFile0.setRawListing("'6f(2PXe{@]B0Wo*8");
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isDirectory();
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertFalse(boolean0);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setSize(0L);
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setHardLinkCount(1519);
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertEquals(1519, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string3 = fTPFile0.toFormattedString((String) null);
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals(0L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertEquals(1519, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals("[Invalid: could not parse file entry]", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string3);
      
      fTPFile0.setSize(1L);
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertEquals(1519, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string4 = fTPFile0.getRawListing();
      assertFalse(fTPFile0.isValid());
      assertEquals(1955, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isFile());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertEquals("'6f(2PXe{@]B0Wo*8", fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getName());
      assertEquals(1519, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals("'6f(2PXe{@]B0Wo*8", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("b(w*");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isValid());
      assertEquals("b(w*", fTPFile0.toString());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("b(w*", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setType(1475);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isValid());
      assertEquals("b(w*", fTPFile0.toString());
      assertEquals(1475, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("b(w*", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isValid());
      assertEquals("b(w*", fTPFile0.toString());
      assertEquals(1475, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("b(w*", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertEquals(0, int0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setUser("");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setType(0);
      assertFalse(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isFile());
      assertEquals(0, fTPFile0.getType());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isFile());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setRawListing((String) null);
      assertFalse(fTPFile0.isFile());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      
      String string0 = fTPFile0.getLink();
      assertFalse(fTPFile0.isFile());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertNull(fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setName((String) null);
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setTimestamp((Calendar) null);
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean0 = fTPFile0.isDirectory();
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isFile());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(3, fTPFile0.getType());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("h/|rWT+d/9.ZrmUA,Q");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("h/|rWT+d/9.ZrmUA,Q", fTPFile0.getRawListing());
      assertNull(fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("h/|rWT+d/9.ZrmUA,Q", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setLink("h/|rWT+d/9.ZrmUA,Q");
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("h/|rWT+d/9.ZrmUA,Q", fTPFile0.getLink());
      assertEquals("h/|rWT+d/9.ZrmUA,Q", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("h/|rWT+d/9.ZrmUA,Q", fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals(3, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("U %)[[t&\"C':#");
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getName());
      assertEquals("U %)[[t&\"C':#", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("U %)[[t&\"C':#", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertNotNull(fTPFile0);
      
      fTPFile0.setHardLinkCount((-1265));
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getName());
      assertEquals("U %)[[t&\"C':#", fTPFile0.getRawListing());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("U %)[[t&\"C':#", fTPFile0.toString());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals((-1265), fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getLink());
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.WORLD_ACCESS);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.getName();
      assertEquals("", fTPFile0.getUser());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.toString());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      fTPFile0.setHardLinkCount(1);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string0 = fTPFile0.toString();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string0);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      Calendar calendar0 = fTPFile0.getTimestamp();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(calendar0);
      
      boolean boolean1 = fTPFile0.isFile();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.toFormattedString();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertEquals("", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("?---------    1                         -1 null", string1);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string1);
      
      fTPFile0.setGroup("?---------    1                         -1 null");
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string2 = fTPFile0.getName();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(string2);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(1, int0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setType(2);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean2 = fTPFile0.isSymbolicLink();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setUser((String) null);
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertNull(fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string3 = fTPFile0.toFormattedString();
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isUnknown());
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(fTPFile0.isDirectory());
      assertEquals("?---------    1                         -1 null", fTPFile0.getGroup());
      assertNull(fTPFile0.getUser());
      assertNull(fTPFile0.getLink());
      assertEquals(1, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getRawListing());
      assertTrue(fTPFile0.isValid());
      assertNull(fTPFile0.toString());
      assertFalse(fTPFile0.isFile());
      assertEquals(2, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("l---------    1 null     ?---------    1                         -1 null       -1 null", string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(fTPFile0);
      
      fTPFile0.setHardLinkCount(0);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      boolean boolean0 = fTPFile0.isFile();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertTrue(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(boolean0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setType(0);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string0 = fTPFile0.toFormattedString("");
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("----------    0                         -1 null", string0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string0);
      
      boolean boolean1 = fTPFile0.isSymbolicLink();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setHardLinkCount(4);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setSize(0L);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setType(0);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setPermission(0, 0, false);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setSize(0);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string1 = fTPFile0.toFormattedString((String) null);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("----------    4                          0 null", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string1);
      
      boolean boolean2 = fTPFile0.isSymbolicLink();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setLink("----------    0                         -1 null");
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals("----------    0                         -1 null", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setName((String) null);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals("----------    0                         -1 null", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string2 = fTPFile0.getUser();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals("----------    0                         -1 null", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string2);
      
      boolean boolean3 = fTPFile0.isFile();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertEquals("----------    0                         -1 null", fTPFile0.getLink());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setLink((String) null);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      long long0 = fTPFile0.getSize();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0L, long0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string3 = fTPFile0.getRawListing();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNull(string3);
      
      boolean boolean4 = fTPFile0.isFile();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      String string4 = fTPFile0.toFormattedString((String) null);
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("----------    4                          0 null", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertNotNull(string4);
      
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals("", fTPFile0.getGroup());
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(4, int0);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setGroup(" %-8s %-8s");
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(" %-8s %-8s", fTPFile0.getGroup());
      assertNull(fTPFile0.getName());
      assertEquals(4, fTPFile0.getHardLinkCount());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setHardLinkCount(0);
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertEquals(" %-8s %-8s", fTPFile0.getGroup());
      assertNull(fTPFile0.getName());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      
      fTPFile0.setGroup("----------    0                         -1 null");
      assertEquals("", fTPFile0.getUser());
      assertFalse(fTPFile0.isDirectory());
      assertNull(fTPFile0.getName());
      assertEquals(0L, fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(0, fTPFile0.getType());
      assertTrue(fTPFile0.isFile());
      assertNull(fTPFile0.getLink());
      assertNull(fTPFile0.getRawListing());
      assertNull(fTPFile0.toString());
      assertEquals("----------    0                         -1 null", fTPFile0.getGroup());
      assertTrue(fTPFile0.isValid());
      assertFalse(fTPFile0.isUnknown());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("Cp<Y<\"ILt#In)oIx");
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(fTPFile0);
      
      String string0 = fTPFile0.toFormattedString();
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string0);
      
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertTrue(boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      String string1 = fTPFile0.toString();
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isDirectory());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNotNull(string1);
      
      fTPFile0.setType(1);
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertNull(fTPFile0.getLink());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setLink("Cp<Y<\"ILt#In)oIx");
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      assertNull(instant0);
      
      boolean boolean1 = fTPFile0.isSymbolicLink();
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setSize(1L);
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean2 = fTPFile0.hasPermission(0, 1);
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean3 = fTPFile0.isUnknown();
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean4 = fTPFile0.isValid();
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean5 = fTPFile0.isDirectory();
      assertFalse(fTPFile0.isUnknown());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.toString());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setRawListing("");
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      int int0 = fTPFile0.getType();
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(1, int0);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      fTPFile0.setHardLinkCount((-1));
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean6 = fTPFile0.isFile();
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
      
      boolean boolean7 = fTPFile0.isDirectory();
      assertFalse(fTPFile0.isUnknown());
      assertNull(fTPFile0.getName());
      assertEquals("Cp<Y<\"ILt#In)oIx", fTPFile0.getLink());
      assertFalse(fTPFile0.isFile());
      assertEquals("", fTPFile0.toString());
      assertEquals("", fTPFile0.getGroup());
      assertEquals(1, fTPFile0.getType());
      assertEquals(1L, fTPFile0.getSize());
      assertFalse(fTPFile0.isValid());
      assertEquals((-1), fTPFile0.getHardLinkCount());
      assertEquals("", fTPFile0.getRawListing());
      assertFalse(fTPFile0.isSymbolicLink());
      assertEquals("", fTPFile0.getUser());
      assertTrue(fTPFile0.isDirectory());
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertEquals(0, FTPFile.USER_ACCESS);
      assertEquals(2, FTPFile.WORLD_ACCESS);
      assertEquals(0, FTPFile.READ_PERMISSION);
      assertEquals(0, FTPFile.FILE_TYPE);
      assertEquals(1, FTPFile.WRITE_PERMISSION);
      assertEquals(1, FTPFile.GROUP_ACCESS);
      assertEquals(1, FTPFile.DIRECTORY_TYPE);
      assertEquals(2, FTPFile.EXECUTE_PERMISSION);
      assertEquals(2, FTPFile.SYMBOLIC_LINK_TYPE);
      assertEquals(3, FTPFile.UNKNOWN_TYPE);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.toFormattedString();
      fTPFile0.isDirectory();
      fTPFile0.getGroup();
      fTPFile0.setGroup("");
      fTPFile0.isValid();
      fTPFile0.getName();
      fTPFile0.getTimestampInstant();
      fTPFile0.isDirectory();
      boolean boolean0 = fTPFile0.isDirectory();
      assertFalse(boolean0);
      
      fTPFile0.getName();
      fTPFile0.getRawListing();
      fTPFile0.setLink("");
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?---------    0                         -1 null", string0);
      
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setUser(":%1$tM");
      fTPFile0.setUser("");
      fTPFile0.getTimestampInstant();
      FTPFile fTPFile1 = new FTPFile();
      fTPFile0.setLink("(R29mG");
      fTPFile1.setRawListing("");
      fTPFile1.getTimestamp();
      fTPFile0.getTimestampInstant();
      fTPFile0.setSize(1);
      fTPFile0.setTimestamp((Calendar) null);
      fTPFile1.setRawListing("^i8j7w+:VXSK");
      fTPFile0.toFormattedString("");
      fTPFile1.setType(1);
      fTPFile1.toFormattedString(" %8d");
      fTPFile0.getGroup();
      fTPFile0.toFormattedString();
      fTPFile1.toFormattedString();
      fTPFile0.setUser("t$e~Ls7f8^#PI");
      fTPFile1.setHardLinkCount(0);
      fTPFile0.setGroup("");
      fTPFile1.getLink();
      fTPFile1.toString();
      assertEquals(1, fTPFile1.getType());
      
      fTPFile0.getLink();
      assertEquals(0, fTPFile0.getHardLinkCount());
  }
}
