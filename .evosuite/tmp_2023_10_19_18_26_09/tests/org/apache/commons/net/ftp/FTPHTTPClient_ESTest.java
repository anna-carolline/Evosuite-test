/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:29:41 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.nio.charset.Charset;
import javax.net.SocketFactory;
import org.apache.commons.net.ftp.FTPHTTPClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPHTTPClient_ESTest extends FTPHTTPClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Charset charset0 = mock(Charset.class, new ViolatedAssumptionAnswer());
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient("&,&1Goh,TP-D.(", 0, charset0);
      SocketFactory socketFactory0 = mock(SocketFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Socket) null).when(socketFactory0).createSocket(anyString() , anyInt());
      fTPHTTPClient0.setSocketFactory(socketFactory0);
      // Undeclared exception!
      try { 
        fTPHTTPClient0.connect("&,&1Goh,TP-D.(", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPHTTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient((String) null, (-1986));
      // Undeclared exception!
      try { 
        fTPHTTPClient0.connect("Fxli~jbjy", 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1986
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = mock(Charset.class, new ViolatedAssumptionAnswer());
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient("", 9, "", "", charset0);
      // Undeclared exception!
      try { 
        fTPHTTPClient0._openDataConnection_((-2394), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2394
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient((String) null, 16, (String) null, (String) null);
      assertFalse(fTPHTTPClient0.isConnected());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient("$%D+lz", 0);
      fTPHTTPClient0.enterLocalPassiveMode();
      // Undeclared exception!
      try { 
        fTPHTTPClient0._openDataConnection_("\r\n", "tBTxcN\"1`-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient((String) null, 16);
      // Undeclared exception!
      try { 
        fTPHTTPClient0._openDataConnection_(10, "org.apache.commons.net.ftp.systemType.default");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Only passive connection mode supported
         //
         verifyException("org.apache.commons.net.ftp.FTPHTTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPHTTPClient fTPHTTPClient0 = new FTPHTTPClient(" *******", 0);
      // Undeclared exception!
      try { 
        fTPHTTPClient0._openDataConnection_(" *******", "W }cy");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Only passive connection mode supported
         //
         verifyException("org.apache.commons.net.ftp.FTPHTTPClient", e);
      }
  }
}
