/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:15:41 GMT 2023
 */

package org.apache.commons.net.examples.ntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import org.apache.commons.net.examples.ntp.SimpleNTPServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNTPServer_ESTest extends SimpleNTPServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.stop();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SimpleNTPServer.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.examples.ntp.SimpleNTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(0);
      simpleNTPServer0.getPort();
      simpleNTPServer0.stop();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'0>'Y24JBy#$8nN~oL";
      stringArray0[1] = "Running NTP service on port ";
      stringArray0[2] = "ICMP";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ">qy";
      stringArray0[7] = "m82$n%$]";
      SimpleNTPServer.main(stringArray0);
      simpleNTPServer0.isStarted();
      simpleNTPServer0.start();
      simpleNTPServer0.stop();
      simpleNTPServer0.start();
      simpleNTPServer0.stop();
      simpleNTPServer0.getPort();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)113;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, (byte)113);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0, mockInetSocketAddress0);
      // Undeclared exception!
      try { 
        simpleNTPServer0.handlePacket(datagramPacket0, (-1832L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ntp.NtpV3Impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(0);
      DatagramPacket datagramPacket0 = null;
      // Undeclared exception!
      try { 
        simpleNTPServer0.handlePacket((DatagramPacket) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ntp.NtpV3Impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(0);
      simpleNTPServer0.stop();
      simpleNTPServer0.connect();
      simpleNTPServer0.stop();
      simpleNTPServer0.isStarted();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(123);
      simpleNTPServer0.stop();
      simpleNTPServer0.isStarted();
      simpleNTPServer0.stop();
      simpleNTPServer0.start();
      simpleNTPServer0.isStarted();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "=f>:yFUlLT;sZ3K2";
      stringArray0[2] = "Tnx$MP+AuNlx(AsDR&";
      stringArray0[3] = "DAYTIME";
      stringArray0[4] = "1qb~m\"'P9q5H^KGa3";
      stringArray0[5] = "";
      stringArray0[6] = "Q[lqu]";
      stringArray0[7] = "";
      stringArray0[8] = "|anZ\"<O^)";
      SimpleNTPServer.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.start();
      // Undeclared exception!
      simpleNTPServer0.run();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.stop();
      simpleNTPServer0.stop();
      // Undeclared exception!
      try { 
        simpleNTPServer0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = null;
      try {
        simpleNTPServer0 = new SimpleNTPServer((-2343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.examples.ntp.SimpleNTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.stop();
      simpleNTPServer0.getPort();
      String[] stringArray0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = 0;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", (byte)4);
      DatagramPacket datagramPacket0 = null;
      try {
        datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unresolved address
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ")AeoHaiY";
      stringArray0[1] = "";
      stringArray0[2] = "m}$x";
      stringArray0[3] = "_ }";
      stringArray0[4] = "ghO=U)&";
      stringArray0[5] = "NTP packet from %s mode=%s%n";
      stringArray0[6] = "";
      stringArray0[7] = "/UDP";
      SimpleNTPServer.main(stringArray0);
      simpleNTPServer0.start();
      simpleNTPServer0.getPort();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = null;
      try {
        simpleNTPServer0 = new SimpleNTPServer((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.examples.ntp.SimpleNTPServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)10;
      simpleNTPServer0.start();
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)0;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0);
      // Undeclared exception!
      try { 
        datagramPacket0.getSocketAddress();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(0);
      simpleNTPServer0.start();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "er3Occth25?<";
      stringArray0[2] = "7wXUF^}A'bfR\",&/!/";
      stringArray0[3] = "/UDP";
      stringArray0[4] = "#EM.;iTD2kp83B]P#`";
      stringArray0[5] = ".%8!'V!xIb>!";
      SimpleNTPServer.main(stringArray0);
      simpleNTPServer0.isStarted();
      simpleNTPServer0.isRunning();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "=wd";
      stringArray0[2] = "";
      stringArray0[3] = "E0";
      stringArray0[4] = "eG7XqW{Py17Z1Pb(z&";
      SimpleNTPServer.main(stringArray0);
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.start();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      int int0 = (-264);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.connect();
      simpleNTPServer0.start();
      String[] stringArray0 = new String[0];
      SimpleNTPServer.main(stringArray0);
      simpleNTPServer0.connect();
      simpleNTPServer0.start();
      simpleNTPServer0.stop();
      simpleNTPServer0.start();
      // Undeclared exception!
      simpleNTPServer0.run();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = new SimpleNTPServer();
      simpleNTPServer0.isRunning();
      // Undeclared exception!
      try { 
        simpleNTPServer0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNTPServer simpleNTPServer0 = null;
      try {
        simpleNTPServer0 = new SimpleNTPServer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.examples.ntp.SimpleNTPServer", e);
      }
  }
}
