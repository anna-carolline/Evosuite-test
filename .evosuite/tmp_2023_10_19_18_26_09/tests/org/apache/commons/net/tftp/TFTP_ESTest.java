/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:33:40 GMT 2023
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.DatagramSocket;
import org.apache.commons.net.DatagramSocketFactory;
import org.apache.commons.net.tftp.TFTP;
import org.apache.commons.net.tftp.TFTPPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTP_ESTest extends TFTP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.trace("", (TFTPPacket) null);
      assertEquals(0, TFTP.ASCII_MODE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      DatagramSocket datagramSocket0 = mock(DatagramSocket.class, new ViolatedAssumptionAnswer());
      DatagramSocketFactory datagramSocketFactory0 = mock(DatagramSocketFactory.class, new ViolatedAssumptionAnswer());
      doReturn(datagramSocket0).when(datagramSocketFactory0).createDatagramSocket(anyInt());
      tFTP0.setDatagramSocketFactory(datagramSocketFactory0);
      tFTP0.open(373);
      try { 
        tFTP0.receive();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.open();
      try { 
        tFTP0.receive();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TFTP.getModeName(2034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2034
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.open(5000);
      try { 
        tFTP0.discardPackets();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      byte[] byteArray0 = new byte[6];
      tFTP0.open((int) (byte)0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      tFTP0.beginBufferedOps();
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.open((int) (byte)0);
      tFTP0.beginBufferedOps();
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.receive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TFTP.getModeName(0);
      assertEquals("netascii", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      tFTP0.endBufferedOps();
      assertEquals(1, TFTP.OCTET_MODE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.discardPackets();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.send((TFTPPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.bufferedSend((TFTPPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DatagramSocket
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TFTP tFTP0 = new TFTP();
      // Undeclared exception!
      try { 
        tFTP0.bufferedReceive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
}
