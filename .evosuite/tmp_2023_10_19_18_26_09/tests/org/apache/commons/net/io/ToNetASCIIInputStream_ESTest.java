/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:28:48 GMT 2023
 */

package org.apache.commons.net.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.commons.net.io.ToNetASCIIInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToNetASCIIInputStream_ESTest extends ToNetASCIIInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(0).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      byte[] byteArray0 = new byte[3];
      int int0 = toNetASCIIInputStream0.read(byteArray0, (int) (byte)1, 1152);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(292).when(inputStream0).available();
      doReturn((-5650)).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.read(byteArray0, (-1), 292);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = toNetASCIIInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      int int0 = toNetASCIIInputStream0.read();
      assertEquals(0, int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      int int0 = toNetASCIIInputStream0.available();
      assertEquals(0, int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(0).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.read((byte[]) null, 81, 1001);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream((InputStream) null);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream((InputStream) null);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1575).when(inputStream0).available();
      doReturn(1575, 1, 10, (-1)).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      byte[] byteArray0 = new byte[9];
      int int0 = toNetASCIIInputStream0.read(byteArray0, 0, (int) (byte)125);
      assertArrayEquals(new byte[] {(byte)39, (byte)1, (byte)13, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(3597).when(inputStream0).available();
      doReturn(13, (-1871), 2843).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        toNetASCIIInputStream0.read(byteArray0, (int) (byte)1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.net.io.ToNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 10).when(inputStream0).available();
      doReturn((-1)).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertNotNull(toNetASCIIInputStream0);
      
      int int0 = toNetASCIIInputStream0.available();
      assertEquals((-1), int0);
      assertFalse(toNetASCIIInputStream0.markSupported());
      
      byte[] byteArray0 = new byte[8];
      int int1 = toNetASCIIInputStream0.read(byteArray0, 0, 1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(toNetASCIIInputStream0.markSupported());
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).available();
      doReturn((-1), 10).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      int int0 = toNetASCIIInputStream0.read();
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      int int1 = toNetASCIIInputStream0.read(byteArray0, 0, 1);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int2 = toNetASCIIInputStream0.read();
      assertEquals(10, int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2078).when(inputStream0).available();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      int int0 = toNetASCIIInputStream0.available();
      assertEquals(2078, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2078, 2078).when(inputStream0).available();
      doReturn((-1), 10, 2078, 2078, (-1)).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      byte[] byteArray0 = new byte[5];
      toNetASCIIInputStream0.read(byteArray0);
      int int0 = toNetASCIIInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte)10, (byte)30, (byte)30, (byte)0}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      byte[] byteArray0 = new byte[5];
      int int0 = toNetASCIIInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      ToNetASCIIInputStream toNetASCIIInputStream1 = new ToNetASCIIInputStream(toNetASCIIInputStream0);
      int int0 = toNetASCIIInputStream1.read();
      assertEquals(13, int0);
      
      int int1 = toNetASCIIInputStream1.read();
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2078, 2078).when(inputStream0).available();
      doReturn((-1), 10).when(inputStream0).read();
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      byte[] byteArray0 = new byte[5];
      int int0 = toNetASCIIInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      
      int int1 = toNetASCIIInputStream0.read();
      assertEquals(13, int1);
      
      int int2 = toNetASCIIInputStream0.available();
      assertEquals(2079, int2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ToNetASCIIInputStream toNetASCIIInputStream0 = new ToNetASCIIInputStream(inputStream0);
      boolean boolean0 = toNetASCIIInputStream0.markSupported();
      assertFalse(boolean0);
  }
}
