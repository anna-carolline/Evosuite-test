/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 23:07:23 GMT 2023
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPAckPacket;
import org.apache.commons.net.tftp.TFTPDataPacket;
import org.apache.commons.net.tftp.TFTPErrorPacket;
import org.apache.commons.net.tftp.TFTPPacket;
import org.apache.commons.net.tftp.TFTPReadRequestPacket;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPPacket_ESTest extends TFTPPacket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 0, "`j(h&", 0);
      String string0 = tFTPReadRequestPacket0.toString();
      assertEquals("/192.168.1.42 0 1 RRQ `j(h& netascii", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 3530, (-2419));
      InetAddress inetAddress1 = MockInetAddress.getByName("");
      tFTPAckPacket0.setAddress(inetAddress1);
      assertEquals(3530, tFTPAckPacket0.getPort());
      assertEquals(4, tFTPAckPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 508, 0, "x6%#Cq{!z");
      int int0 = tFTPErrorPacket0.getType();
      assertEquals(5, int0);
      assertEquals(508, tFTPErrorPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 4);
      datagramPacket0.setData(byteArray0);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket((InetAddress) null, 0, "", 0);
      tFTPReadRequestPacket0.newDatagram();
      assertEquals(1, tFTPReadRequestPacket0.getType());
      assertEquals(0, tFTPReadRequestPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("V>N3jta-{", 26);
      InetAddress inetAddress0 = mockInetSocketAddress0.getAddress();
      byte[] byteArray0 = new byte[8];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 6, 26, byteArray0);
      tFTPDataPacket0.newDatagram();
      assertEquals(6, tFTPDataPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[7];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 659, 276, byteArray0, 1654, 0);
      assertEquals(659, tFTPDataPacket0.getPort());
      
      tFTPDataPacket0.setPort((byte)0);
      int int0 = tFTPDataPacket0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[7];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 659, 276, byteArray0, 1654, 0);
      tFTPDataPacket0.setPort((byte) (-100));
      int int0 = tFTPDataPacket0.getPort();
      assertEquals((-100), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket((InetAddress) null, 0, "", 0);
      tFTPReadRequestPacket0.getAddress();
      assertEquals(0, tFTPReadRequestPacket0.getPort());
      assertEquals(1, tFTPReadRequestPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "", (-398));
      InetAddress inetAddress1 = tFTPWriteRequestPacket0.getAddress();
      assertEquals(2, tFTPWriteRequestPacket0.getType());
      assertEquals(0, tFTPWriteRequestPacket0.getPort());
      assertNotNull(inetAddress1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 4, "Pu)'M5>'q{6g%", (byte)3);
      // Undeclared exception!
      try { 
        tFTPReadRequestPacket0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TFTPPacket.newTFTPPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress((String) null, byteArray0);
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 512, (byte)5, (String) null);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket((InetAddress) null, (-1736), (-2555), byteArray0, 4, 1045);
      // Undeclared exception!
      try { 
        tFTPDataPacket0.newDatagram();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 4);
      TFTPPacket tFTPPacket0 = TFTPPacket.newTFTPPacket(datagramPacket0);
      assertEquals((-1), tFTPPacket0.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2479);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 2, mockInetSocketAddress0);
      try { 
        TFTPPacket.newTFTPPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad packet. Datagram data length is too short.
         //
         verifyException("org.apache.commons.net.tftp.TFTPPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[5];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 110, 4, byteArray0);
      InetAddress inetAddress1 = tFTPDataPacket0.getAddress();
      assertEquals(110, tFTPDataPacket0.getPort());
      assertNotNull(inetAddress1);
      assertEquals(3, tFTPDataPacket0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[1];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 4, 5, byteArray0, 5, (byte) (-44));
      String string0 = tFTPDataPacket0.toString();
      assertEquals("/192.168.1.42 4 3 DATA 5 -44", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[7];
      TFTPDataPacket tFTPDataPacket0 = new TFTPDataPacket(inetAddress0, 659, 276, byteArray0, 1654, 0);
      int int0 = tFTPDataPacket0.getPort();
      assertEquals(659, int0);
      assertEquals(3, tFTPDataPacket0.getType());
  }
}
