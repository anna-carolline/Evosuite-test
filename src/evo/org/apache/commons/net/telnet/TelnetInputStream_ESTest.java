/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:48:01 GMT 2023
 */

package org.apache.commons.net.telnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.net.telnet.TelnetClient;
import org.apache.commons.net.telnet.TelnetInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TelnetInputStream_ESTest extends TelnetInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1412), (-1412), (-1412), 130).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)4;
      telnetInputStream0.read();
      telnetInputStream0.mark(0);
      telnetInputStream1.read(byteArray0);
      telnetInputStream1.start();
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-39);
      telnetInputStream1.read(byteArray0, (int) (byte)10, (int) (byte) (-39));
      telnetInputStream1.run();
      telnetInputStream1.markSupported();
      telnetInputStream0.read(byteArray0);
      telnetInputStream0.close();
      telnetInputStream0.read();
      telnetInputStream0.read(byteArray0, (-1), (-5700));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(353).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, true);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        telnetInputStream1.read(byteArray0, (int) (byte)0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, true);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      telnetInputStream1.start();
      telnetInputStream1.close();
      telnetInputStream1.mark(6);
      telnetInputStream1.read();
      try { 
        telnetInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1238;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1238).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(220).when(inputStream0).available();
      doReturn(3327).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      telnetInputStream0.available();
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      telnetInputStream0.read(byteArray0);
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, false);
      telnetInputStream1.skip(0);
      // Undeclared exception!
      try { 
        telnetInputStream1.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        telnetInputStream1.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.Telnet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-100);
      try { 
        telnetInputStream1.read(byteArray0, 2247, 1339);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      telnetInputStream0.run();
      telnetInputStream0.start();
      telnetInputStream0.read();
      telnetInputStream0.run();
      byte[] byteArray0 = new byte[0];
      telnetInputStream0.read(byteArray0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        telnetInputStream0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, false);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      telnetInputStream1.start();
      telnetInputStream0.available();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        telnetInputStream1.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)38;
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, false);
      long long0 = 0L;
      telnetInputStream0.skip(0L);
      telnetInputStream0.close();
      telnetInputStream0.read();
      telnetInputStream0.run();
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-1);
      telnetInputStream0.read(byteArray0);
      telnetInputStream1.skip(0L);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        telnetInputStream1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, false);
      telnetInputStream0.mark(3);
      TelnetInputStream telnetInputStream1 = null;
      try {
        telnetInputStream1 = new TelnetInputStream(telnetInputStream0, (TelnetClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = null;
      TelnetInputStream telnetInputStream1 = null;
      try {
        telnetInputStream1 = new TelnetInputStream(telnetInputStream0, (TelnetClient) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      telnetInputStream0.start();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-39);
      telnetInputStream0.mark((-1174));
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)1;
      telnetInputStream0.close();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      telnetInputStream0.read(byteArray0);
      telnetInputStream0.read(byteArray0, (-195), (-4));
      telnetInputStream0.read();
      telnetInputStream0.close();
      telnetInputStream0.read();
      telnetInputStream0.available();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-36);
      try { 
        telnetInputStream1.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, false);
      telnetInputStream0.start();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, false);
      telnetInputStream0.run();
      telnetInputStream0.close();
      telnetInputStream0.close();
      // Undeclared exception!
      try { 
        telnetInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, false);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      telnetInputStream1.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)86;
      telnetInputStream1.read(byteArray0, (int) (byte)13, (int) (byte)86);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)68;
      telnetInputStream1.read(byteArray0, 0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, false);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      telnetInputStream1.available();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      telnetInputStream0.close();
      telnetInputStream0.close();
      try { 
        telnetInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.run();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      telnetInputStream0.mark(2);
      byteArray0[2] = (byte)1;
      byte byte0 = (byte) (-91);
      try { 
        telnetInputStream0.read(byteArray0, (-611), 267);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      telnetInputStream0.read();
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, true);
      telnetInputStream0.read();
      telnetInputStream0.read();
      byte[] byteArray0 = new byte[4];
      telnetInputStream1.read(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-1);
      telnetInputStream1.read(byteArray0);
      telnetInputStream1.start();
      telnetInputStream1.markSupported();
      telnetInputStream0.read();
      telnetInputStream1.available();
      telnetInputStream0.start();
      telnetInputStream1.read();
      telnetInputStream0.markSupported();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = null;
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream(inputStream0, (TelnetClient) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)4;
      telnetInputStream0.read();
      telnetInputStream0.mark(0);
      telnetInputStream1.read(byteArray0);
      telnetInputStream1.start();
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-39);
      telnetInputStream1.read(byteArray0, (int) (byte)10, (int) (byte) (-39));
      telnetInputStream1.run();
      telnetInputStream1.markSupported();
      telnetInputStream0.read(byteArray0);
      telnetInputStream0.close();
      telnetInputStream0.read();
      telnetInputStream0.read(byteArray0, (-1), (-5700));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-90);
      byte[] byteArray2 = new byte[0];
      TelnetClient telnetClient2 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient2, false);
      telnetInputStream0.start();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(240).when(inputStream0).available();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      telnetInputStream0.mark(0);
      telnetInputStream0.available();
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)17;
      telnetInputStream1.read(byteArray0, (-5611), 1);
      telnetInputStream1.run();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream(inputStream0, (TelnetClient) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(inputStream0).available();
      doReturn(0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(0L).when(inputStream0).skip(anyLong());
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(inputStream0, telnetClient0, true);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      telnetInputStream1.read(byteArray0);
      telnetInputStream0.available();
      byte byte1 = (byte)3;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-26);
      telnetInputStream0.start();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = byte2;
      byteArray1[1] = byte0;
      telnetInputStream0.read(byteArray1);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      telnetInputStream1.read(byteArray0);
      telnetInputStream0.markSupported();
      long long0 = 208L;
      telnetInputStream0.skip(long0);
      telnetInputStream0.read(byteArray0, (int) byteArray0[3], (int) byte4);
      telnetInputStream0.available();
      telnetInputStream0.available();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TelnetClient telnetClient0 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      TelnetClient telnetClient1 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      TelnetInputStream telnetInputStream1 = new TelnetInputStream(telnetInputStream0, telnetClient1, false);
      TelnetClient telnetClient2 = mock(TelnetClient.class, new ViolatedAssumptionAnswer());
      telnetInputStream1.close();
      TelnetInputStream telnetInputStream2 = new TelnetInputStream(telnetInputStream1, telnetClient2, false);
      telnetInputStream1.read();
      telnetInputStream2.start();
      try { 
        telnetInputStream2.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
}
