/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:57:39 GMT 2023
 */

package org.apache.commons.net.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.net.io.FromNetASCIIInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FromNetASCIIInputStream_ESTest extends FromNetASCIIInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      fromNetASCIIInputStream0.unread(byteArray0);
      int int0 = fromNetASCIIInputStream0.available();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = fromNetASCIIInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      int int0 = fromNetASCIIInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      int int0 = fromNetASCIIInputStream0.read();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1745);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(pushbackInputStream0);
      int int0 = fromNetASCIIInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      int int0 = fromNetASCIIInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        fromNetASCIIInputStream0.read((byte[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        fromNetASCIIInputStream0.read(byteArray0, 1777, 42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream((InputStream) null);
      byte[] byteArray0 = new byte[6];
      try { 
        fromNetASCIIInputStream0.read(byteArray0, (int) (byte) (-47), (int) (byte) (-47));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        fromNetASCIIInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.io.FromNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream((InputStream) null);
      byte[] byteArray0 = new byte[5];
      try { 
        fromNetASCIIInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream((InputStream) null);
      try { 
        fromNetASCIIInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        fromNetASCIIInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      int int0 = fromNetASCIIInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(byteArrayInputStream0);
      int int0 = fromNetASCIIInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream((InputStream) null);
      try { 
        fromNetASCIIInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.commons.net.io.FromNetASCIIInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FromNetASCIIInputStream.isConversionRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1745);
      FromNetASCIIInputStream fromNetASCIIInputStream0 = new FromNetASCIIInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[8];
      int int0 = fromNetASCIIInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }
}
