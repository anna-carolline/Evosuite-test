/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 19:20:35 GMT 2023
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.parser.MacOsPeterFTPEntryParser;
import org.apache.commons.net.ftp.parser.NTFTPEntryParser;
import org.apache.commons.net.ftp.parser.OS2FTPEntryParser;
import org.apache.commons.net.ftp.parser.OS400FTPEntryParser;
import org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurableFTPFileEntryParserImpl_ESTest extends ConfigurableFTPFileEntryParserImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      try { 
        oS2FTPEntryParser0.parseTimestamp("(9,.e43-A B7Vn1o~");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp '(9,.e43-A B7Vn1o~' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      fTPClientConfig0.setDefaultDateFormatStr("(dskLbh e4rEhdP");
      // Undeclared exception!
      try { 
        oS400FTPEntryParser0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'b'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      oS400FTPEntryParser0.configure(fTPClientConfig0);
      assertEquals("", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("?RwHAOan", "", "org.apache.commons.io.filefilter.WildcardFilter", "", "", "Bj", true, false);
      // Undeclared exception!
      try { 
        oS2FTPEntryParser0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MacOsPeterFTPEntryParser macOsPeterFTPEntryParser0 = new MacOsPeterFTPEntryParser((FTPClientConfig) null);
      macOsPeterFTPEntryParser0.configure((FTPClientConfig) null);
      assertEquals(0, macOsPeterFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser();
      assertEquals(0, nTFTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", (String) null, "", (String) null, "");
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser(fTPClientConfig0);
      // Undeclared exception!
      try { 
        vMSVersioningFTPEntryParser0.parseTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
