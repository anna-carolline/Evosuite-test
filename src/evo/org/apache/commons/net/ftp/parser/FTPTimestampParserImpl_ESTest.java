/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 22:31:20 GMT 2023
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.parser.FTPTimestampParserImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPTimestampParserImpl_ESTest extends FTPTimestampParserImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("zE%>pqH^O_2/MCk)YJ", "b-H'dxfK8~kRm{>", "", "[tZ/h-=x@?+", "b-H'dxfK8~kRm{>", "[tZ/h-=x@?+", false, false);
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      fTPTimestampParserImpl0.parseTimestamp("", (Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, "`H");
      fTPClientConfig0.setDefaultDateFormatStr("");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.parseTimestamp("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.isLenientFutureDates();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.getRecentDateFormatString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.getDefaultDateFormatString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.parseTimestamp("", (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.parseTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, (String) null);
      fTPClientConfig0.setDefaultDateFormatStr("");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.getRecentDateFormatString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure((FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig(".'*-Z@W7]3", "<_T9~((z[A/f", ".'*-Z@W7]3");
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = MockCalendar.getInstance();
      try { 
        fTPTimestampParserImpl0.parseTimestamp("FsgvYX=C)r~Q!l1", calendar0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp 'FsgvYX=C)r~Q!l1' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      Calendar calendar0 = MockCalendar.getInstance();
      try { 
        fTPTimestampParserImpl0.parseTimestamp("FsgvYX=C)r~Q!l1", calendar0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp 'FsgvYX=C)r~Q!l1' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getServerTimeZone();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setServerTimeZoneId("UNIX");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      try { 
        fTPTimestampParserImpl0.parseTimestamp("en");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp 'en' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 0, 0, 2810, 0, 2810);
      fTPTimestampParserImpl0.parseTimestamp("", (Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setServerLanguageCode("");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, "`H");
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
      
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setRecentDateFormatStr((String) null);
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      assertEquals("", fTPTimestampParserImpl0.getDefaultDateFormatString());
      
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getRecentDateFormat();
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
      assertFalse(simpleDateFormat0.isLenient());
      assertEquals("MMM d HH:mm", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getRecentDateFormatString();
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
      assertEquals("MMM d HH:mm", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.isLenientFutureDates();
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
      assertEquals("MMM d HH:mm", fTPTimestampParserImpl0.getRecentDateFormatString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getDefaultDateFormatString();
      assertEquals("MMM d yyyy", string0);
      assertEquals("MMM d HH:mm", fTPTimestampParserImpl0.getRecentDateFormatString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getShortMonths();
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
      assertEquals("MMM d HH:mm", fTPTimestampParserImpl0.getRecentDateFormatString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getDefaultDateFormat();
      assertNotNull(simpleDateFormat0);
      assertEquals("MMM d HH:mm", fTPTimestampParserImpl0.getRecentDateFormatString());
      assertFalse(simpleDateFormat0.isLenient());
      assertEquals("MMM d yyyy", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.setLenientFutureDates(true);
      assertEquals("MMM d HH:mm", fTPTimestampParserImpl0.getRecentDateFormatString());
      assertEquals("MMM d yyyy", fTPTimestampParserImpl0.getDefaultDateFormatString());
  }
}
