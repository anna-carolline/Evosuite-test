/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 21:43:00 GMT 2023
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import junit.framework.AssertionFailedError;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.parser.AbstractFTPParseTest;
import org.apache.commons.net.ftp.parser.EnterpriseUnixFTPEntryParserTest;
import org.apache.commons.net.ftp.parser.MLSxEntryParserTest;
import org.apache.commons.net.ftp.parser.MVSFTPEntryParserTest;
import org.apache.commons.net.ftp.parser.NTFTPEntryParserTest;
import org.apache.commons.net.ftp.parser.NetwareFTPEntryParserTest;
import org.apache.commons.net.ftp.parser.OS2FTPEntryParserTest;
import org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest;
import org.apache.commons.net.ftp.parser.OS400FTPEntryParserTest;
import org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest;
import org.apache.commons.net.ftp.parser.VMSFTPEntryParserTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFTPParseTest_ESTest extends AbstractFTPParseTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OS2FTPEntryParserTest oS2FTPEntryParserTest0 = new OS2FTPEntryParserTest("<KI");
      oS2FTPEntryParserTest0.testRecentPrecision();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OS400FTPEntryParserTest oS400FTPEntryParserTest0 = new OS400FTPEntryParserTest("1-JUN.LIS;2              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)");
      AbstractFTPParseTest.CalendarUnit abstractFTPParseTest_CalendarUnit0 = AbstractFTPParseTest.CalendarUnit.MILLISECOND;
      oS400FTPEntryParserTest0.testPrecision("-rw-r--r--   1 ftp      nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip", abstractFTPParseTest_CalendarUnit0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MVSFTPEntryParserTest mVSFTPEntryParserTest0 = new MVSFTPEntryParserTest("");
      mVSFTPEntryParserTest0.testParseFieldsOnFile();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnterpriseUnixFTPEntryParserTest enterpriseUnixFTPEntryParserTest0 = new EnterpriseUnixFTPEntryParserTest("lNy<P9[w-q]M*S%.m");
      enterpriseUnixFTPEntryParserTest0.testParseFieldsOnDirectory();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OS400FTPEntryParserAdditionalTest oS400FTPEntryParserAdditionalTest0 = new OS400FTPEntryParserAdditionalTest("^s+");
      oS400FTPEntryParserAdditionalTest0.testDefaultPrecision();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OS400FTPEntryParserAdditionalTest oS400FTPEntryParserAdditionalTest0 = new OS400FTPEntryParserAdditionalTest("=O*biUBcu6f5");
      oS400FTPEntryParserAdditionalTest0.testBadListing();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OS400FTPEntryParserTest oS400FTPEntryParserTest0 = new OS400FTPEntryParserTest("     0           DIR   13-05-97   25:49  MPTN");
      // Undeclared exception!
      try { 
        oS400FTPEntryParserTest0.testRecentPrecision();
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Expected not set SECOND in ----rwxr-x   1 PEP      0           4019 Mar 18 18:58 einladung.zip
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NTFTPEntryParserTest nTFTPEntryParserTest0 = new NTFTPEntryParserTest("f>g8^Hg'Cv");
      AbstractFTPParseTest.CalendarUnit abstractFTPParseTest_CalendarUnit0 = AbstractFTPParseTest.CalendarUnit.MONTH;
      // Undeclared exception!
      try { 
        nTFTPEntryParserTest0.testPrecision("-rw-r--r--   1ftp       nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip", abstractFTPParseTest_CalendarUnit0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Could not parse -rw-r--r--   1ftp       nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VMSFTPEntryParserTest vMSFTPEntryParserTest0 = new VMSFTPEntryParserTest("");
      AbstractFTPParseTest.CalendarUnit abstractFTPParseTest_CalendarUnit0 = AbstractFTPParseTest.CalendarUnit.MONTH;
      // Undeclared exception!
      try { 
        vMSFTPEntryParserTest0.testPrecision((String) null, abstractFTPParseTest_CalendarUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NTFTPEntryParserTest nTFTPEntryParserTest0 = new NTFTPEntryParserTest("/1c#Tkn+[z");
      try { 
        nTFTPEntryParserTest0.testParseFieldsOnFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.NTFTPEntryParserTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetwareFTPEntryParserTest netwareFTPEntryParserTest0 = new NetwareFTPEntryParserTest("rI6w&cW8F%sDX5Aa3");
      try { 
        netwareFTPEntryParserTest0.testParseFieldsOnDirectory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.NetwareFTPEntryParserTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnterpriseUnixFTPEntryParserTest enterpriseUnixFTPEntryParserTest0 = new EnterpriseUnixFTPEntryParserTest((String) null);
      // Undeclared exception!
      try { 
        enterpriseUnixFTPEntryParserTest0.testGoodListing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.AbstractFTPParseTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VMSFTPEntryParserTest vMSFTPEntryParserTest0 = new VMSFTPEntryParserTest((String) null);
      // Undeclared exception!
      try { 
        vMSFTPEntryParserTest0.testDefaultPrecision();
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Expected not set MILLISECOND in 1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [TRANSLATED]    (RWED,RD,,)
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnixFTPEntryParserTest unixFTPEntryParserTest0 = new UnixFTPEntryParserTest((String) null);
      MLSxEntryParserTest mLSxEntryParserTest0 = new MLSxEntryParserTest((String) null);
      FTPFile fTPFile0 = mock(FTPFile.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fTPFile0).getLink();
      doReturn(0).when(fTPFile0).getType();
      FTPFile fTPFile1 = mLSxEntryParserTest0.nullFileOrNullDate(fTPFile0);
      // Undeclared exception!
      try { 
        unixFTPEntryParserTest0.doAdditionalGoodTests((String) null, fTPFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OS2FTPEntryParserTest oS2FTPEntryParserTest0 = new OS2FTPEntryParserTest("EEE MMM dd HH:mm:ss yyyy");
      // Undeclared exception!
      try { 
        oS2FTPEntryParserTest0.testBadListing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.AbstractFTPParseTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VMSFTPEntryParserTest vMSFTPEntryParserTest0 = new VMSFTPEntryParserTest("Should have Failed to parse <");
      MLSxEntryParserTest mLSxEntryParserTest0 = new MLSxEntryParserTest("Should have Failed to parse <");
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      FTPFile fTPFile0 = mock(FTPFile.class, new ViolatedAssumptionAnswer());
      doReturn(calendar0).when(fTPFile0).getTimestamp();
      doReturn((String) null).when(fTPFile0).toString();
      FTPFile fTPFile1 = mLSxEntryParserTest0.nullFileOrNullDate(fTPFile0);
      FTPFile fTPFile2 = vMSFTPEntryParserTest0.nullFileOrNullDate(fTPFile1);
      assertEquals(0L, fTPFile2.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnixFTPEntryParserTest unixFTPEntryParserTest0 = new UnixFTPEntryParserTest("^s+");
      FTPFile[] fTPFileArray0 = new FTPFile[6];
      MLSxEntryParserTest mLSxEntryParserTest0 = new MLSxEntryParserTest("& hc2AA");
      FTPFile fTPFile0 = mLSxEntryParserTest0.nullFileOrNullDate(fTPFileArray0[0]);
      FTPFile fTPFile1 = unixFTPEntryParserTest0.nullFileOrNullDate(fTPFile0);
      assertNull(fTPFile1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnixFTPEntryParserTest unixFTPEntryParserTest0 = new UnixFTPEntryParserTest("> C)ARUmP");
      MLSxEntryParserTest mLSxEntryParserTest0 = new MLSxEntryParserTest("MINUTE");
      FTPFile fTPFile0 = mock(FTPFile.class, new ViolatedAssumptionAnswer());
      doReturn((Calendar) null).when(fTPFile0).getTimestamp();
      FTPFile fTPFile1 = mLSxEntryParserTest0.nullFileOrNullDate(fTPFile0);
      FTPFile fTPFile2 = unixFTPEntryParserTest0.nullFileOrNullDate(fTPFile1);
      assertNull(fTPFile2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OS400FTPEntryParserAdditionalTest oS400FTPEntryParserAdditionalTest0 = new OS400FTPEntryParserAdditionalTest((String) null);
      oS400FTPEntryParserAdditionalTest0.doAdditionalBadTests((String) null, (FTPFile) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OS400FTPEntryParserAdditionalTest oS400FTPEntryParserAdditionalTest0 = new OS400FTPEntryParserAdditionalTest("^s+");
      oS400FTPEntryParserAdditionalTest0.setUp();
      oS400FTPEntryParserAdditionalTest0.testGoodListing();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VMSFTPEntryParserTest vMSFTPEntryParserTest0 = new VMSFTPEntryParserTest("EEE MMM dd HH:mm:ss yyyy");
      vMSFTPEntryParserTest0.doAdditionalGoodTests("EEE MMM dd HH:mm:ss yyyy", (FTPFile) null);
  }
}
