/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 21:49:39 GMT 2023
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.parser.OS400FTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OS400FTPEntryParser_ESTest extends OS400FTPEntryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser((FTPClientConfig) null);
      assertEquals(0, oS400FTPEntryParser0.getGroupCnt());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = oS400FTPEntryParser0.getDefaultConfiguration();
      assertEquals("yy/MM/dd HH:mm:ss", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("OS/400", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      // Undeclared exception!
      try { 
        oS400FTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn("`HM,OOc", "`HM,OOc").when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn("`HM,OOc", (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn("*STMF").when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      OS400FTPEntryParser oS400FTPEntryParser0 = null;
      try {
        oS400FTPEntryParser0 = new OS400FTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      oS400FTPEntryParser0.setRegex("<");
      // Undeclared exception!
      try { 
        oS400FTPEntryParser0.parseFTPEntry("<");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPFile fTPFile0 = oS400FTPEntryParser0.parseFTPEntry("+_ps_t`l1*TDc}<!}C!");
      assertNull(fTPFile0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = mock(FTPClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fTPClientConfig0).getDefaultDateFormatStr();
      doReturn((String) null, (String) null).when(fTPClientConfig0).getRecentDateFormatStr();
      doReturn((String) null).when(fTPClientConfig0).getServerLanguageCode();
      doReturn((String) null).when(fTPClientConfig0).getShortMonthNames();
      OS400FTPEntryParser oS400FTPEntryParser0 = null;
      try {
        oS400FTPEntryParser0 = new OS400FTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
}
