/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 19 21:34:55 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Collection;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClientConfig_ESTest extends FTPClientConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "", "", "", "", true, false);
      assertEquals("", fTPClientConfig0.getShortMonthNames());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", fTPClientConfig0.getServerLanguageCode());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("no", "-VYg*n~PPGoD]8", "");
      assertEquals("-VYg*n~PPGoD]8", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("no", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.FTPClientConfig", "", "", "org.apache.commons.net.ftp.FTPClientConfig", "c5h4rqsQ'dd75Wmt", "", false, false);
      boolean boolean0 = fTPClientConfig0.isLenientFutureDates();
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("c5h4rqsQ'dd75Wmt", fTPClientConfig0.getShortMonthNames());
      assertEquals("org.apache.commons.net.ftp.FTPClientConfig", fTPClientConfig0.getServerLanguageCode());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("mJ32}h!", " `nvpQ|>gv80:", " `nvpQ|>gv80:", " `nvpQ|>gv80:", " `nvpQ|>gv80:", " `nvpQ|>gv80:", true, true);
      boolean boolean0 = fTPClientConfig0.getUnparseableEntries();
      assertTrue(boolean0);
      assertEquals(" `nvpQ|>gv80:", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals(" `nvpQ|>gv80:", fTPClientConfig0.getServerLanguageCode());
      assertEquals("mJ32}h!", fTPClientConfig0.getServerSystemKey());
      assertEquals(" `nvpQ|>gv80:", fTPClientConfig0.getServerTimeZoneId());
      assertEquals(" `nvpQ|>gv80:", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals(" `nvpQ|>gv80:", fTPClientConfig0.getShortMonthNames());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("puS", "VMS", "", "VMS", "VMS", "slGAVs4?8");
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertEquals("VMS", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("puS", fTPClientConfig0.getServerSystemKey());
      assertEquals("VMS", string0);
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("slGAVs4?8", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("VMS", fTPClientConfig0.getServerLanguageCode());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("@DATKB;;M^RU;ZS", "@DATKB;;M^RU;ZS", "", "@DATKB;;M^RU;ZS", "", "");
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertEquals("@DATKB;;M^RU;ZS", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("@DATKB;;M^RU;ZS", fTPClientConfig0.getServerLanguageCode());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("@DATKB;;M^RU;ZS", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("WINDOWS", "", "", "FvF{t);SVF]`O_?Y~J", "", "#fu7D0`;K Q;L7s)z", false, false);
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertEquals("FvF{t);SVF]`O_?Y~J", fTPClientConfig0.getServerLanguageCode());
      assertEquals("", fTPClientConfig0.getShortMonthNames());
      assertFalse(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("WINDOWS", fTPClientConfig0.getServerSystemKey());
      assertFalse(fTPClientConfig0.getUnparseableEntries());
      assertEquals("#fu7D0`;K Q;L7s)z", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("j`dg>");
      fTPClientConfig0.setServerTimeZoneId("");
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertEquals("j`dg>", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, (String) null);
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertEquals("", string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "MVS", "n(X#b$HaNRg?}87sh%=", "MVS", "n(X#b$HaNRg?}87sh%=", "n(X#b$HaNRg?}87sh%=", true, true);
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertEquals("n(X#b$HaNRg?}87sh%=", fTPClientConfig0.getServerTimeZoneId());
      assertTrue(fTPClientConfig0.getUnparseableEntries());
      assertEquals("n(X#b$HaNRg?}87sh%=", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("n(X#b$HaNRg?}87sh%=", fTPClientConfig0.getShortMonthNames());
      assertEquals("MVS", string0);
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("MVS", fTPClientConfig0.getDefaultDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("4B>kGZ6b\"6.47(,kPF:", "4B>kGZ6b\"6.47(,kPF:", "4B>kGZ6b\"6.47(,kPF:", "", "", "");
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertEquals("4B>kGZ6b\"6.47(,kPF:", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("4B>kGZ6b\"6.47(,kPF:", fTPClientConfig0.getRecentDateFormatStr());
      assertEquals("4B>kGZ6b\"6.47(,kPF:", fTPClientConfig0.getDefaultDateFormatStr());
      assertEquals("", fTPClientConfig0.getServerTimeZoneId());
      assertEquals("", string0);
      assertEquals("", fTPClientConfig0.getShortMonthNames());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertNull(string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      fTPClientConfig0.setRecentDateFormatStr("sl");
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertEquals("", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("sl", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "", "", "", "");
      fTPClientConfig0.setDefaultDateFormatStr("d%>#;zU0q,i");
      fTPClientConfig0.getDefaultDateFormatStr();
      assertEquals("d%>#;zU0q,i", fTPClientConfig0.getDefaultDateFormatStr());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setDefaultDateFormatStr("");
      String string0 = fTPClientConfig0.getDefaultDateFormatStr();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.getDateFormatSymbols("jan|f\u00E9v|mar|avr|mai|jun|jui|ao\u00FB|sep|oct|nov|d\u00E9c");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.lookupDateFormatSymbols((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = null;
      try {
        fTPClientConfig0 = new FTPClientConfig((FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = null;
      try {
        fTPClientConfig0 = new FTPClientConfig("h47'", (FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.getDateFormatSymbols("fr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("ro");
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("fr");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = FTPClientConfig.lookupDateFormatSymbols("MVS");
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null);
      fTPClientConfig0.setUnparseableEntries(true);
      assertTrue(fTPClientConfig0.getUnparseableEntries());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, true, true);
      String string0 = fTPClientConfig0.getServerTimeZoneId();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertNull(string0);
      assertTrue(fTPClientConfig0.getUnparseableEntries());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      String string0 = fTPClientConfig0.getShortMonthNames();
      assertNull(string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null);
      String string0 = fTPClientConfig0.getDefaultDateFormatStr();
      assertNull(string0);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null);
      fTPClientConfig0.setShortMonthNames("UNIX");
      assertEquals("UNIX", fTPClientConfig0.getShortMonthNames());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setServerLanguageCode("");
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertEquals("", fTPClientConfig0.getServerLanguageCode());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.getUnparseableEntries();
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      String string0 = fTPClientConfig0.getServerSystemKey();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null);
      fTPClientConfig0.setLenientFutureDates(true);
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", (String) null, (String) null, "n^", "n^", (String) null);
      FTPClientConfig fTPClientConfig1 = new FTPClientConfig("", fTPClientConfig0);
      assertEquals("n^", fTPClientConfig1.getServerLanguageCode());
      assertEquals("", fTPClientConfig1.getServerSystemKey());
      assertEquals("n^", fTPClientConfig1.getShortMonthNames());
      assertEquals("", fTPClientConfig0.getServerSystemKey());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null);
      FTPClientConfig fTPClientConfig1 = new FTPClientConfig(fTPClientConfig0);
      assertTrue(fTPClientConfig1.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, true, true);
      boolean boolean0 = fTPClientConfig0.isLenientFutureDates();
      assertTrue(boolean0);
      assertTrue(fTPClientConfig0.getUnparseableEntries());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("^/.7iW)EKHMP=", "^/.7iW)EKHMP=", "");
      String string0 = fTPClientConfig0.getRecentDateFormatStr();
      assertEquals("^/.7iW)EKHMP=", fTPClientConfig0.getServerSystemKey());
      assertEquals("", string0);
      assertEquals("^/.7iW)EKHMP=", fTPClientConfig0.getDefaultDateFormatStr());
      assertTrue(fTPClientConfig0.isLenientFutureDates());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Collection<String> collection0 = FTPClientConfig.getSupportedLanguageCodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClientConfig.getDateFormatSymbols((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      String string0 = fTPClientConfig0.getServerLanguageCode();
      assertTrue(fTPClientConfig0.isLenientFutureDates());
      assertEquals("UNIX", fTPClientConfig0.getServerSystemKey());
      assertNull(string0);
  }
}
