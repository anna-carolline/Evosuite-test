/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 14 18:34:49 GMT 2023
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.InetAddress;
import java.time.Duration;
import java.util.Enumeration;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPCmd;
import org.apache.commons.net.ftp.FTPFileFilter;
import org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory;
import org.apache.commons.net.io.CopyStreamAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClient_ESTest extends FTPClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0L, fTPClient0.getRestartOffset());
      
      fTPClient0.setRestartOffset(0L);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply("_)eLl$t");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments(";v");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertNotNull(string0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(";v", string0);
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertNotNull(string0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals("", string0);
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType(1828, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(8, 12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType(124);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileTransferMode(20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileTransferMode(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileStructure((-3415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileStructure(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.rename("ISO-8859-1", "-a");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.reinitialize();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.printWorkingDirectory();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mlistFile("zpz<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmInstant("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmFile("h");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmCalendar("cFL^?uwg3L");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebResult", "", "com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebResult");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login((String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing("<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing("bOJ,53(3%jV=!da", "bOJ,53(3%jV=!da");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parser type: bOJ,53(3%jV=!da
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing((String) null, "org.apache.commons.net.ftp.FTPClient$NatServerResolverImpl");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.hasFeature("\"", "org.apache.commons.net.util.NetConstants");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("", "-a ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("K");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSize("SW(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getModificationTime("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValues("il V=2 7r%C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValue(" is not same as server ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.enterRemotePassiveMode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.enterRemoteActiveMode((InetAddress) null, (-5405));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      try { 
        fTPClient0.enterRemoteActiveMode(inetAddress0, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommandAsStrings("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.createParser(".Z_ym&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parser type: .Z_ym&
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.createParser((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._storeFileStream("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream(21);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        fTPClient0._storeFile("org.apache.commons.net.ftp.FTPClient$NatServerResolverImpl", "org.apache.commons.net.ftp.FTPClient$NatServerResolverImpl", pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFileStream("Vx'`7", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.net.ftp.ipAddressFromPasvResponse");
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFile("WWP|1 &=9UJ?DU", "\"cq,1S|O.", mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parsePassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PASS;
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(fTPCmd0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_("]\n", "61(8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_((-117644756), "4");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -117644756
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      StringReader stringReader0 = new StringReader("/systemType.properties");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_(bufferedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories("name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      try { 
        fTPClient0.listFiles("\"apache.commons.net.ftp.systemType.default", fTPFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(boolean0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(2L);
      assertEquals(2L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-1L));
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("-a");
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(boolean0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(boolean0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore("#9S");
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(boolean0);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve((String) null);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(boolean0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0, fTPClient0.getDataConnectionMode());
      
      boolean boolean0 = fTPClient0.remoteAppend((String) null);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(boolean0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.getReportHostAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.getHostAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getActivePort();
      assertEquals(0, int0);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing("MVS", "MVS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parsePassiveModeReply("LOGIN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not parse passive host information.
         // Server Reply: LOGIN
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = FTPClient.parsePathname("\"apache.commons.net.ftp.systemType.default");
      assertEquals("che.commons.net.ftp.systemType.default", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.logout();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertEquals(1000, int0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveReplyTimeout(109);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.restart(1757L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      CopyStreamAdapter copyStreamAdapter0 = new CopyStreamAdapter();
      fTPClient0.setCopyStreamListener(copyStreamAdapter0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Duration duration0 = Duration.ofMinutes(12);
      fTPClient0.setControlKeepAliveTimeout(duration0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PORT;
      try { 
        fTPClient0.hasFeature(fTPCmd0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      assertEquals(0, int0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.appendFileStream("@a2ya?q/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setUseEPSVwithIPv4(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.abort();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReceieveDataSocketBufferSize(3062);
      assertEquals(3062, fTPClient0.getReceiveDataSocketBufferSize());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0, int0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile((InputStream) mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendNoOp();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertFalse(fTPClient0.getListHiddenFiles());
      
      fTPClient0.setListHiddenFiles(true);
      assertTrue(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(11L, 2074);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir("(", (FTPFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.structureMount("/'PMXx1`}");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      DefaultFTPFileEntryParserFactory defaultFTPFileEntryParserFactory0 = new DefaultFTPFileEntryParserFactory();
      fTPClient0.setParserFactory(defaultFTPFileEntryParserFactory0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClient0.configure(fTPClientConfig0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFileStream("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(2, "org.apache.commons.net.io.CopyStreamEvent");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile((String) null, (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)33, 0);
      // Undeclared exception!
      try { 
        fTPClient0.appendFile("Could not parse passive host information.\nServer Reply: ", byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.features();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getAutodetectUTF8();
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveTimeout((-6903L));
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getDataTimeout();
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPClient0.storeFile((String) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertEquals(0, int0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress("R");
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(boolean0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(boolean0);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getControlKeepAliveTimeout();
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeToParentDirectory();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles(">G$=&z!>Z/HhlJ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getControlKeepAliveTimeoutDuration();
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getAutodetectUTF8());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.completePendingCommand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveReplyTimeout((Duration) null);
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeFileStream("org.apache.commons.net.ftp.ipAddressFromPasvResponse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFile("q#yq5GRcw^Omjh<", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendSiteCommand("O{B/l9u|jG>BH_0(4o~");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeWorkingDirectory("-a");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalPassiveMode();
      // Undeclared exception!
      try { 
        fTPClient0.appendFileStream("1;p?|nP Y8C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.deleteFile("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(1705);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setBufferSize((-136));
      assertEquals((-136), fTPClient0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.removeDirectory("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      
      fTPClient0.setRemoteVerificationEnabled(false);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress("\"8859-1");
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setSendDataSocketBufferSize(3070);
      assertEquals(3070, fTPClient0.getSendDataSocketBufferSize());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("");
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setModificationTime("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(1968526677);
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Duration duration0 = fTPClient0.getControlKeepAliveReplyTimeoutDuration();
      fTPClient0.setDataTimeout(duration0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange(3, (-1822));
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(32, 32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setIpAddressFromPasvResponse(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isIpAddressFromPasvResponse());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), fTPClient0.getPassivePort());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames("#Hq2~PHNYh*R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0L, long0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommand("", " is not same as server ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertFalse(fTPClient0.getListHiddenFiles());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals((-1), int0);
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.makeDirectory("Invalid server reply (MLST): '");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.isIpAddressFromPasvResponse();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertEquals((-1), fTPClient0.getPassivePort());
      assertFalse(fTPClient0.getListHiddenFiles());
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
      assertEquals(0, fTPClient0.getDataConnectionMode());
      assertEquals(0L, fTPClient0.getRestartOffset());
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
      assertEquals(0, int0);
  }
}
